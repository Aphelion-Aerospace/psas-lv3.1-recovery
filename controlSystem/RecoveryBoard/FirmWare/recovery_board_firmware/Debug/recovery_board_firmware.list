
recovery_board_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003704  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080037c4  080037c4  000137c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037fc  080037fc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080037fc  080037fc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037fc  080037fc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037fc  080037fc  000137fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003800  08003800  00013800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003804  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  2000000c  08003810  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08003810  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d496  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d65  00000000  00000000  0002d4ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000dc0  00000000  00000000  0002f230  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cc8  00000000  00000000  0002fff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003fd8  00000000  00000000  00030cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a62d  00000000  00000000  00034c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000800d4  00000000  00000000  0003f2bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bf391  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003190  00000000  00000000  000bf40c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080037ac 	.word	0x080037ac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080037ac 	.word	0x080037ac

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 feb6 	bl	8000f94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f816 	bl	8000258 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 fa46 	bl	80006bc <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000230:	f000 fa10 	bl	8000654 <_ZL19MX_USART2_UART_Initv>
  MX_CAN_Init();
 8000234:	f000 f8d2 	bl	80003dc <_ZL11MX_CAN_Initv>
  MX_ADC_Init();
 8000238:	f000 f85c 	bl	80002f4 <_ZL11MX_ADC_Initv>
  MX_TIM16_Init();
 800023c:	f000 f974 	bl	8000528 <_ZL13MX_TIM16_Initv>
  MX_TIM3_Init();
 8000240:	f000 f906 	bl	8000450 <_ZL12MX_TIM3_Initv>
  /* USER CODE BEGIN 2 */

  flightInit();
 8000244:	f000 fad0 	bl	80007e8 <_ZL10flightInitv>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  waitForAvionics(hadc);
 8000248:	4b02      	ldr	r3, [pc, #8]	; (8000254 <main+0x34>)
 800024a:	0018      	movs	r0, r3
 800024c:	f000 fb16 	bl	800087c <_Z15waitForAvionicsR19__ADC_HandleTypeDef>
 8000250:	e7fa      	b.n	8000248 <main+0x28>
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	20000028 	.word	0x20000028

08000258 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000258:	b590      	push	{r4, r7, lr}
 800025a:	b093      	sub	sp, #76	; 0x4c
 800025c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025e:	2414      	movs	r4, #20
 8000260:	193b      	adds	r3, r7, r4
 8000262:	0018      	movs	r0, r3
 8000264:	2334      	movs	r3, #52	; 0x34
 8000266:	001a      	movs	r2, r3
 8000268:	2100      	movs	r1, #0
 800026a:	f003 fa97 	bl	800379c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	0018      	movs	r0, r3
 8000272:	2310      	movs	r3, #16
 8000274:	001a      	movs	r2, r3
 8000276:	2100      	movs	r1, #0
 8000278:	f003 fa90 	bl	800379c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 800027c:	0021      	movs	r1, r4
 800027e:	187b      	adds	r3, r7, r1
 8000280:	2212      	movs	r2, #18
 8000282:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000284:	187b      	adds	r3, r7, r1
 8000286:	2201      	movs	r2, #1
 8000288:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800028a:	187b      	adds	r3, r7, r1
 800028c:	2201      	movs	r2, #1
 800028e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000290:	187b      	adds	r3, r7, r1
 8000292:	2210      	movs	r2, #16
 8000294:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000296:	187b      	adds	r3, r7, r1
 8000298:	2210      	movs	r2, #16
 800029a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800029c:	187b      	adds	r3, r7, r1
 800029e:	2200      	movs	r2, #0
 80002a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a2:	187b      	adds	r3, r7, r1
 80002a4:	0018      	movs	r0, r3
 80002a6:	f001 fde9 	bl	8001e7c <HAL_RCC_OscConfig>
 80002aa:	0003      	movs	r3, r0
 80002ac:	1e5a      	subs	r2, r3, #1
 80002ae:	4193      	sbcs	r3, r2
 80002b0:	b2db      	uxtb	r3, r3
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 80002b6:	f000 fa9e 	bl	80007f6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	2207      	movs	r2, #7
 80002be:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	2200      	movs	r2, #0
 80002c4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	2200      	movs	r2, #0
 80002ca:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	2200      	movs	r2, #0
 80002d0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	2100      	movs	r1, #0
 80002d6:	0018      	movs	r0, r3
 80002d8:	f002 f956 	bl	8002588 <HAL_RCC_ClockConfig>
 80002dc:	0003      	movs	r3, r0
 80002de:	1e5a      	subs	r2, r3, #1
 80002e0:	4193      	sbcs	r3, r2
 80002e2:	b2db      	uxtb	r3, r3
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d001      	beq.n	80002ec <_Z18SystemClock_Configv+0x94>
  {
    Error_Handler();
 80002e8:	f000 fa85 	bl	80007f6 <Error_Handler>
  }
}
 80002ec:	46c0      	nop			; (mov r8, r8)
 80002ee:	46bd      	mov	sp, r7
 80002f0:	b013      	add	sp, #76	; 0x4c
 80002f2:	bd90      	pop	{r4, r7, pc}

080002f4 <_ZL11MX_ADC_Initv>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b084      	sub	sp, #16
 80002f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	0018      	movs	r0, r3
 80002fe:	230c      	movs	r3, #12
 8000300:	001a      	movs	r2, r3
 8000302:	2100      	movs	r1, #0
 8000304:	f003 fa4a 	bl	800379c <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8000308:	4b32      	ldr	r3, [pc, #200]	; (80003d4 <_ZL11MX_ADC_Initv+0xe0>)
 800030a:	4a33      	ldr	r2, [pc, #204]	; (80003d8 <_ZL11MX_ADC_Initv+0xe4>)
 800030c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800030e:	4b31      	ldr	r3, [pc, #196]	; (80003d4 <_ZL11MX_ADC_Initv+0xe0>)
 8000310:	2200      	movs	r2, #0
 8000312:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000314:	4b2f      	ldr	r3, [pc, #188]	; (80003d4 <_ZL11MX_ADC_Initv+0xe0>)
 8000316:	2200      	movs	r2, #0
 8000318:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800031a:	4b2e      	ldr	r3, [pc, #184]	; (80003d4 <_ZL11MX_ADC_Initv+0xe0>)
 800031c:	2200      	movs	r2, #0
 800031e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000320:	4b2c      	ldr	r3, [pc, #176]	; (80003d4 <_ZL11MX_ADC_Initv+0xe0>)
 8000322:	2201      	movs	r2, #1
 8000324:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000326:	4b2b      	ldr	r3, [pc, #172]	; (80003d4 <_ZL11MX_ADC_Initv+0xe0>)
 8000328:	2204      	movs	r2, #4
 800032a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800032c:	4b29      	ldr	r3, [pc, #164]	; (80003d4 <_ZL11MX_ADC_Initv+0xe0>)
 800032e:	2200      	movs	r2, #0
 8000330:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000332:	4b28      	ldr	r3, [pc, #160]	; (80003d4 <_ZL11MX_ADC_Initv+0xe0>)
 8000334:	2200      	movs	r2, #0
 8000336:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000338:	4b26      	ldr	r3, [pc, #152]	; (80003d4 <_ZL11MX_ADC_Initv+0xe0>)
 800033a:	2200      	movs	r2, #0
 800033c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800033e:	4b25      	ldr	r3, [pc, #148]	; (80003d4 <_ZL11MX_ADC_Initv+0xe0>)
 8000340:	2200      	movs	r2, #0
 8000342:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000344:	4b23      	ldr	r3, [pc, #140]	; (80003d4 <_ZL11MX_ADC_Initv+0xe0>)
 8000346:	22c2      	movs	r2, #194	; 0xc2
 8000348:	32ff      	adds	r2, #255	; 0xff
 800034a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800034c:	4b21      	ldr	r3, [pc, #132]	; (80003d4 <_ZL11MX_ADC_Initv+0xe0>)
 800034e:	2200      	movs	r2, #0
 8000350:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000352:	4b20      	ldr	r3, [pc, #128]	; (80003d4 <_ZL11MX_ADC_Initv+0xe0>)
 8000354:	2224      	movs	r2, #36	; 0x24
 8000356:	2100      	movs	r1, #0
 8000358:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800035a:	4b1e      	ldr	r3, [pc, #120]	; (80003d4 <_ZL11MX_ADC_Initv+0xe0>)
 800035c:	2201      	movs	r2, #1
 800035e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000360:	4b1c      	ldr	r3, [pc, #112]	; (80003d4 <_ZL11MX_ADC_Initv+0xe0>)
 8000362:	0018      	movs	r0, r3
 8000364:	f000 fe7a 	bl	800105c <HAL_ADC_Init>
 8000368:	0003      	movs	r3, r0
 800036a:	1e5a      	subs	r2, r3, #1
 800036c:	4193      	sbcs	r3, r2
 800036e:	b2db      	uxtb	r3, r3
 8000370:	2b00      	cmp	r3, #0
 8000372:	d001      	beq.n	8000378 <_ZL11MX_ADC_Initv+0x84>
  {
    Error_Handler();
 8000374:	f000 fa3f 	bl	80007f6 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000378:	1d3b      	adds	r3, r7, #4
 800037a:	2201      	movs	r2, #1
 800037c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	2280      	movs	r2, #128	; 0x80
 8000382:	0152      	lsls	r2, r2, #5
 8000384:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	2280      	movs	r2, #128	; 0x80
 800038a:	0552      	lsls	r2, r2, #21
 800038c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800038e:	1d3a      	adds	r2, r7, #4
 8000390:	4b10      	ldr	r3, [pc, #64]	; (80003d4 <_ZL11MX_ADC_Initv+0xe0>)
 8000392:	0011      	movs	r1, r2
 8000394:	0018      	movs	r0, r3
 8000396:	f001 f893 	bl	80014c0 <HAL_ADC_ConfigChannel>
 800039a:	0003      	movs	r3, r0
 800039c:	1e5a      	subs	r2, r3, #1
 800039e:	4193      	sbcs	r3, r2
 80003a0:	b2db      	uxtb	r3, r3
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <_ZL11MX_ADC_Initv+0xb6>
  {
    Error_Handler();
 80003a6:	f000 fa26 	bl	80007f6 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80003aa:	1d3b      	adds	r3, r7, #4
 80003ac:	2209      	movs	r2, #9
 80003ae:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003b0:	1d3a      	adds	r2, r7, #4
 80003b2:	4b08      	ldr	r3, [pc, #32]	; (80003d4 <_ZL11MX_ADC_Initv+0xe0>)
 80003b4:	0011      	movs	r1, r2
 80003b6:	0018      	movs	r0, r3
 80003b8:	f001 f882 	bl	80014c0 <HAL_ADC_ConfigChannel>
 80003bc:	0003      	movs	r3, r0
 80003be:	1e5a      	subs	r2, r3, #1
 80003c0:	4193      	sbcs	r3, r2
 80003c2:	b2db      	uxtb	r3, r3
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <_ZL11MX_ADC_Initv+0xd8>
  {
    Error_Handler();
 80003c8:	f000 fa15 	bl	80007f6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80003cc:	46c0      	nop			; (mov r8, r8)
 80003ce:	46bd      	mov	sp, r7
 80003d0:	b004      	add	sp, #16
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	20000028 	.word	0x20000028
 80003d8:	40012400 	.word	0x40012400

080003dc <_ZL11MX_CAN_Initv>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80003e0:	4b19      	ldr	r3, [pc, #100]	; (8000448 <_ZL11MX_CAN_Initv+0x6c>)
 80003e2:	4a1a      	ldr	r2, [pc, #104]	; (800044c <_ZL11MX_CAN_Initv+0x70>)
 80003e4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80003e6:	4b18      	ldr	r3, [pc, #96]	; (8000448 <_ZL11MX_CAN_Initv+0x6c>)
 80003e8:	2210      	movs	r2, #16
 80003ea:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80003ec:	4b16      	ldr	r3, [pc, #88]	; (8000448 <_ZL11MX_CAN_Initv+0x6c>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80003f2:	4b15      	ldr	r3, [pc, #84]	; (8000448 <_ZL11MX_CAN_Initv+0x6c>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80003f8:	4b13      	ldr	r3, [pc, #76]	; (8000448 <_ZL11MX_CAN_Initv+0x6c>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80003fe:	4b12      	ldr	r3, [pc, #72]	; (8000448 <_ZL11MX_CAN_Initv+0x6c>)
 8000400:	2200      	movs	r2, #0
 8000402:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000404:	4b10      	ldr	r3, [pc, #64]	; (8000448 <_ZL11MX_CAN_Initv+0x6c>)
 8000406:	2200      	movs	r2, #0
 8000408:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800040a:	4b0f      	ldr	r3, [pc, #60]	; (8000448 <_ZL11MX_CAN_Initv+0x6c>)
 800040c:	2200      	movs	r2, #0
 800040e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000410:	4b0d      	ldr	r3, [pc, #52]	; (8000448 <_ZL11MX_CAN_Initv+0x6c>)
 8000412:	2200      	movs	r2, #0
 8000414:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000416:	4b0c      	ldr	r3, [pc, #48]	; (8000448 <_ZL11MX_CAN_Initv+0x6c>)
 8000418:	2200      	movs	r2, #0
 800041a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800041c:	4b0a      	ldr	r3, [pc, #40]	; (8000448 <_ZL11MX_CAN_Initv+0x6c>)
 800041e:	2200      	movs	r2, #0
 8000420:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000422:	4b09      	ldr	r3, [pc, #36]	; (8000448 <_ZL11MX_CAN_Initv+0x6c>)
 8000424:	2200      	movs	r2, #0
 8000426:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000428:	4b07      	ldr	r3, [pc, #28]	; (8000448 <_ZL11MX_CAN_Initv+0x6c>)
 800042a:	0018      	movs	r0, r3
 800042c:	f001 f9d2 	bl	80017d4 <HAL_CAN_Init>
 8000430:	0003      	movs	r3, r0
 8000432:	1e5a      	subs	r2, r3, #1
 8000434:	4193      	sbcs	r3, r2
 8000436:	b2db      	uxtb	r3, r3
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <_ZL11MX_CAN_Initv+0x64>
  {
    Error_Handler();
 800043c:	f000 f9db 	bl	80007f6 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000440:	46c0      	nop			; (mov r8, r8)
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
 8000446:	46c0      	nop			; (mov r8, r8)
 8000448:	20000068 	.word	0x20000068
 800044c:	40006400 	.word	0x40006400

08000450 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b08a      	sub	sp, #40	; 0x28
 8000454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000456:	2320      	movs	r3, #32
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	0018      	movs	r0, r3
 800045c:	2308      	movs	r3, #8
 800045e:	001a      	movs	r2, r3
 8000460:	2100      	movs	r1, #0
 8000462:	f003 f99b 	bl	800379c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000466:	1d3b      	adds	r3, r7, #4
 8000468:	0018      	movs	r0, r3
 800046a:	231c      	movs	r3, #28
 800046c:	001a      	movs	r2, r3
 800046e:	2100      	movs	r1, #0
 8000470:	f003 f994 	bl	800379c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000474:	4b2a      	ldr	r3, [pc, #168]	; (8000520 <_ZL12MX_TIM3_Initv+0xd0>)
 8000476:	4a2b      	ldr	r2, [pc, #172]	; (8000524 <_ZL12MX_TIM3_Initv+0xd4>)
 8000478:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 13;
 800047a:	4b29      	ldr	r3, [pc, #164]	; (8000520 <_ZL12MX_TIM3_Initv+0xd0>)
 800047c:	220d      	movs	r2, #13
 800047e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000480:	4b27      	ldr	r3, [pc, #156]	; (8000520 <_ZL12MX_TIM3_Initv+0xd0>)
 8000482:	2200      	movs	r2, #0
 8000484:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 142;
 8000486:	4b26      	ldr	r3, [pc, #152]	; (8000520 <_ZL12MX_TIM3_Initv+0xd0>)
 8000488:	228e      	movs	r2, #142	; 0x8e
 800048a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800048c:	4b24      	ldr	r3, [pc, #144]	; (8000520 <_ZL12MX_TIM3_Initv+0xd0>)
 800048e:	2200      	movs	r2, #0
 8000490:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000492:	4b23      	ldr	r3, [pc, #140]	; (8000520 <_ZL12MX_TIM3_Initv+0xd0>)
 8000494:	2200      	movs	r2, #0
 8000496:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000498:	4b21      	ldr	r3, [pc, #132]	; (8000520 <_ZL12MX_TIM3_Initv+0xd0>)
 800049a:	0018      	movs	r0, r3
 800049c:	f002 fa18 	bl	80028d0 <HAL_TIM_PWM_Init>
 80004a0:	0003      	movs	r3, r0
 80004a2:	1e5a      	subs	r2, r3, #1
 80004a4:	4193      	sbcs	r3, r2
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <_ZL12MX_TIM3_Initv+0x60>
  {
    Error_Handler();
 80004ac:	f000 f9a3 	bl	80007f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004b0:	2120      	movs	r1, #32
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004b8:	187b      	adds	r3, r7, r1
 80004ba:	2200      	movs	r2, #0
 80004bc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80004be:	187a      	adds	r2, r7, r1
 80004c0:	4b17      	ldr	r3, [pc, #92]	; (8000520 <_ZL12MX_TIM3_Initv+0xd0>)
 80004c2:	0011      	movs	r1, r2
 80004c4:	0018      	movs	r0, r3
 80004c6:	f002 fd3d 	bl	8002f44 <HAL_TIMEx_MasterConfigSynchronization>
 80004ca:	0003      	movs	r3, r0
 80004cc:	1e5a      	subs	r2, r3, #1
 80004ce:	4193      	sbcs	r3, r2
 80004d0:	b2db      	uxtb	r3, r3
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 80004d6:	f000 f98e 	bl	80007f6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	2260      	movs	r2, #96	; 0x60
 80004de:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80004e0:	1d3b      	adds	r3, r7, #4
 80004e2:	2200      	movs	r2, #0
 80004e4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004e6:	1d3b      	adds	r3, r7, #4
 80004e8:	2200      	movs	r2, #0
 80004ea:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004ec:	1d3b      	adds	r3, r7, #4
 80004ee:	2200      	movs	r2, #0
 80004f0:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004f2:	1d39      	adds	r1, r7, #4
 80004f4:	4b0a      	ldr	r3, [pc, #40]	; (8000520 <_ZL12MX_TIM3_Initv+0xd0>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	0018      	movs	r0, r3
 80004fa:	f002 fa15 	bl	8002928 <HAL_TIM_PWM_ConfigChannel>
 80004fe:	0003      	movs	r3, r0
 8000500:	1e5a      	subs	r2, r3, #1
 8000502:	4193      	sbcs	r3, r2
 8000504:	b2db      	uxtb	r3, r3
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <_ZL12MX_TIM3_Initv+0xbe>
  {
    Error_Handler();
 800050a:	f000 f974 	bl	80007f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800050e:	4b04      	ldr	r3, [pc, #16]	; (8000520 <_ZL12MX_TIM3_Initv+0xd0>)
 8000510:	0018      	movs	r0, r3
 8000512:	f000 fc23 	bl	8000d5c <HAL_TIM_MspPostInit>

}
 8000516:	46c0      	nop			; (mov r8, r8)
 8000518:	46bd      	mov	sp, r7
 800051a:	b00a      	add	sp, #40	; 0x28
 800051c:	bd80      	pop	{r7, pc}
 800051e:	46c0      	nop			; (mov r8, r8)
 8000520:	20000090 	.word	0x20000090
 8000524:	40000400 	.word	0x40000400

08000528 <_ZL13MX_TIM16_Initv>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b090      	sub	sp, #64	; 0x40
 800052c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800052e:	2324      	movs	r3, #36	; 0x24
 8000530:	18fb      	adds	r3, r7, r3
 8000532:	0018      	movs	r0, r3
 8000534:	231c      	movs	r3, #28
 8000536:	001a      	movs	r2, r3
 8000538:	2100      	movs	r1, #0
 800053a:	f003 f92f 	bl	800379c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800053e:	1d3b      	adds	r3, r7, #4
 8000540:	0018      	movs	r0, r3
 8000542:	2320      	movs	r3, #32
 8000544:	001a      	movs	r2, r3
 8000546:	2100      	movs	r1, #0
 8000548:	f003 f928 	bl	800379c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800054c:	4b3e      	ldr	r3, [pc, #248]	; (8000648 <_ZL13MX_TIM16_Initv+0x120>)
 800054e:	4a3f      	ldr	r2, [pc, #252]	; (800064c <_ZL13MX_TIM16_Initv+0x124>)
 8000550:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1;
 8000552:	4b3d      	ldr	r3, [pc, #244]	; (8000648 <_ZL13MX_TIM16_Initv+0x120>)
 8000554:	2201      	movs	r2, #1
 8000556:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000558:	4b3b      	ldr	r3, [pc, #236]	; (8000648 <_ZL13MX_TIM16_Initv+0x120>)
 800055a:	2200      	movs	r2, #0
 800055c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 800055e:	4b3a      	ldr	r3, [pc, #232]	; (8000648 <_ZL13MX_TIM16_Initv+0x120>)
 8000560:	4a3b      	ldr	r2, [pc, #236]	; (8000650 <_ZL13MX_TIM16_Initv+0x128>)
 8000562:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000564:	4b38      	ldr	r3, [pc, #224]	; (8000648 <_ZL13MX_TIM16_Initv+0x120>)
 8000566:	2200      	movs	r2, #0
 8000568:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800056a:	4b37      	ldr	r3, [pc, #220]	; (8000648 <_ZL13MX_TIM16_Initv+0x120>)
 800056c:	2200      	movs	r2, #0
 800056e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000570:	4b35      	ldr	r3, [pc, #212]	; (8000648 <_ZL13MX_TIM16_Initv+0x120>)
 8000572:	2200      	movs	r2, #0
 8000574:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000576:	4b34      	ldr	r3, [pc, #208]	; (8000648 <_ZL13MX_TIM16_Initv+0x120>)
 8000578:	0018      	movs	r0, r3
 800057a:	f002 f97d 	bl	8002878 <HAL_TIM_Base_Init>
 800057e:	0003      	movs	r3, r0
 8000580:	1e5a      	subs	r2, r3, #1
 8000582:	4193      	sbcs	r3, r2
 8000584:	b2db      	uxtb	r3, r3
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <_ZL13MX_TIM16_Initv+0x66>
  {
    Error_Handler();
 800058a:	f000 f934 	bl	80007f6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800058e:	4b2e      	ldr	r3, [pc, #184]	; (8000648 <_ZL13MX_TIM16_Initv+0x120>)
 8000590:	0018      	movs	r0, r3
 8000592:	f002 f99d 	bl	80028d0 <HAL_TIM_PWM_Init>
 8000596:	0003      	movs	r3, r0
 8000598:	1e5a      	subs	r2, r3, #1
 800059a:	4193      	sbcs	r3, r2
 800059c:	b2db      	uxtb	r3, r3
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <_ZL13MX_TIM16_Initv+0x7e>
  {
    Error_Handler();
 80005a2:	f000 f928 	bl	80007f6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005a6:	2124      	movs	r1, #36	; 0x24
 80005a8:	187b      	adds	r3, r7, r1
 80005aa:	2260      	movs	r2, #96	; 0x60
 80005ac:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80005ae:	187b      	adds	r3, r7, r1
 80005b0:	2200      	movs	r2, #0
 80005b2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005b4:	187b      	adds	r3, r7, r1
 80005b6:	2200      	movs	r2, #0
 80005b8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80005ba:	187b      	adds	r3, r7, r1
 80005bc:	2200      	movs	r2, #0
 80005be:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005c0:	187b      	adds	r3, r7, r1
 80005c2:	2200      	movs	r2, #0
 80005c4:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80005c6:	187b      	adds	r3, r7, r1
 80005c8:	2200      	movs	r2, #0
 80005ca:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80005cc:	187b      	adds	r3, r7, r1
 80005ce:	2200      	movs	r2, #0
 80005d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005d2:	1879      	adds	r1, r7, r1
 80005d4:	4b1c      	ldr	r3, [pc, #112]	; (8000648 <_ZL13MX_TIM16_Initv+0x120>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	0018      	movs	r0, r3
 80005da:	f002 f9a5 	bl	8002928 <HAL_TIM_PWM_ConfigChannel>
 80005de:	0003      	movs	r3, r0
 80005e0:	1e5a      	subs	r2, r3, #1
 80005e2:	4193      	sbcs	r3, r2
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <_ZL13MX_TIM16_Initv+0xc6>
  {
    Error_Handler();
 80005ea:	f000 f904 	bl	80007f6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80005f4:	1d3b      	adds	r3, r7, #4
 80005f6:	2200      	movs	r2, #0
 80005f8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	2200      	movs	r2, #0
 8000604:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	2200      	movs	r2, #0
 800060a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	2280      	movs	r2, #128	; 0x80
 8000610:	0192      	lsls	r2, r2, #6
 8000612:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	2200      	movs	r2, #0
 8000618:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800061a:	1d3a      	adds	r2, r7, #4
 800061c:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <_ZL13MX_TIM16_Initv+0x120>)
 800061e:	0011      	movs	r1, r2
 8000620:	0018      	movs	r0, r3
 8000622:	f002 fce7 	bl	8002ff4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000626:	0003      	movs	r3, r0
 8000628:	1e5a      	subs	r2, r3, #1
 800062a:	4193      	sbcs	r3, r2
 800062c:	b2db      	uxtb	r3, r3
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <_ZL13MX_TIM16_Initv+0x10e>
  {
    Error_Handler();
 8000632:	f000 f8e0 	bl	80007f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000636:	4b04      	ldr	r3, [pc, #16]	; (8000648 <_ZL13MX_TIM16_Initv+0x120>)
 8000638:	0018      	movs	r0, r3
 800063a:	f000 fb8f 	bl	8000d5c <HAL_TIM_MspPostInit>

}
 800063e:	46c0      	nop			; (mov r8, r8)
 8000640:	46bd      	mov	sp, r7
 8000642:	b010      	add	sp, #64	; 0x40
 8000644:	bd80      	pop	{r7, pc}
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	200000d0 	.word	0x200000d0
 800064c:	40014400 	.word	0x40014400
 8000650:	000003e7 	.word	0x000003e7

08000654 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000658:	4b16      	ldr	r3, [pc, #88]	; (80006b4 <_ZL19MX_USART2_UART_Initv+0x60>)
 800065a:	4a17      	ldr	r2, [pc, #92]	; (80006b8 <_ZL19MX_USART2_UART_Initv+0x64>)
 800065c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800065e:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000660:	2296      	movs	r2, #150	; 0x96
 8000662:	0212      	lsls	r2, r2, #8
 8000664:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000666:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800066c:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <_ZL19MX_USART2_UART_Initv+0x60>)
 800066e:	2200      	movs	r2, #0
 8000670:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000672:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000674:	2200      	movs	r2, #0
 8000676:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000678:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <_ZL19MX_USART2_UART_Initv+0x60>)
 800067a:	220c      	movs	r2, #12
 800067c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800067e:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000684:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000686:	2200      	movs	r2, #0
 8000688:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800068a:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <_ZL19MX_USART2_UART_Initv+0x60>)
 800068c:	2200      	movs	r2, #0
 800068e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000692:	2200      	movs	r2, #0
 8000694:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000696:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000698:	0018      	movs	r0, r3
 800069a:	f002 fd09 	bl	80030b0 <HAL_UART_Init>
 800069e:	0003      	movs	r3, r0
 80006a0:	1e5a      	subs	r2, r3, #1
 80006a2:	4193      	sbcs	r3, r2
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <_ZL19MX_USART2_UART_Initv+0x5a>
  {
    Error_Handler();
 80006aa:	f000 f8a4 	bl	80007f6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ae:	46c0      	nop			; (mov r8, r8)
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000110 	.word	0x20000110
 80006b8:	40004400 	.word	0x40004400

080006bc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006bc:	b590      	push	{r4, r7, lr}
 80006be:	b089      	sub	sp, #36	; 0x24
 80006c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c2:	240c      	movs	r4, #12
 80006c4:	193b      	adds	r3, r7, r4
 80006c6:	0018      	movs	r0, r3
 80006c8:	2314      	movs	r3, #20
 80006ca:	001a      	movs	r2, r3
 80006cc:	2100      	movs	r1, #0
 80006ce:	f003 f865 	bl	800379c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006d2:	4b43      	ldr	r3, [pc, #268]	; (80007e0 <_ZL12MX_GPIO_Initv+0x124>)
 80006d4:	695a      	ldr	r2, [r3, #20]
 80006d6:	4b42      	ldr	r3, [pc, #264]	; (80007e0 <_ZL12MX_GPIO_Initv+0x124>)
 80006d8:	2180      	movs	r1, #128	; 0x80
 80006da:	03c9      	lsls	r1, r1, #15
 80006dc:	430a      	orrs	r2, r1
 80006de:	615a      	str	r2, [r3, #20]
 80006e0:	4b3f      	ldr	r3, [pc, #252]	; (80007e0 <_ZL12MX_GPIO_Initv+0x124>)
 80006e2:	695a      	ldr	r2, [r3, #20]
 80006e4:	2380      	movs	r3, #128	; 0x80
 80006e6:	03db      	lsls	r3, r3, #15
 80006e8:	4013      	ands	r3, r2
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ee:	4b3c      	ldr	r3, [pc, #240]	; (80007e0 <_ZL12MX_GPIO_Initv+0x124>)
 80006f0:	695a      	ldr	r2, [r3, #20]
 80006f2:	4b3b      	ldr	r3, [pc, #236]	; (80007e0 <_ZL12MX_GPIO_Initv+0x124>)
 80006f4:	2180      	movs	r1, #128	; 0x80
 80006f6:	0289      	lsls	r1, r1, #10
 80006f8:	430a      	orrs	r2, r1
 80006fa:	615a      	str	r2, [r3, #20]
 80006fc:	4b38      	ldr	r3, [pc, #224]	; (80007e0 <_ZL12MX_GPIO_Initv+0x124>)
 80006fe:	695a      	ldr	r2, [r3, #20]
 8000700:	2380      	movs	r3, #128	; 0x80
 8000702:	029b      	lsls	r3, r3, #10
 8000704:	4013      	ands	r3, r2
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800070a:	4b35      	ldr	r3, [pc, #212]	; (80007e0 <_ZL12MX_GPIO_Initv+0x124>)
 800070c:	695a      	ldr	r2, [r3, #20]
 800070e:	4b34      	ldr	r3, [pc, #208]	; (80007e0 <_ZL12MX_GPIO_Initv+0x124>)
 8000710:	2180      	movs	r1, #128	; 0x80
 8000712:	02c9      	lsls	r1, r1, #11
 8000714:	430a      	orrs	r2, r1
 8000716:	615a      	str	r2, [r3, #20]
 8000718:	4b31      	ldr	r3, [pc, #196]	; (80007e0 <_ZL12MX_GPIO_Initv+0x124>)
 800071a:	695a      	ldr	r2, [r3, #20]
 800071c:	2380      	movs	r3, #128	; 0x80
 800071e:	02db      	lsls	r3, r3, #11
 8000720:	4013      	ands	r3, r2
 8000722:	603b      	str	r3, [r7, #0]
 8000724:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DCM_DIR_Pin|DCM_ON_Pin|LA_IN1_Pin|LA_IN2_Pin, GPIO_PIN_RESET);
 8000726:	23e8      	movs	r3, #232	; 0xe8
 8000728:	0099      	lsls	r1, r3, #2
 800072a:	2390      	movs	r3, #144	; 0x90
 800072c:	05db      	lsls	r3, r3, #23
 800072e:	2200      	movs	r2, #0
 8000730:	0018      	movs	r0, r3
 8000732:	f001 fb86 	bl	8001e42 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|SENSOR_ON_Pin|ACOK_Pin, GPIO_PIN_RESET);
 8000736:	4b2b      	ldr	r3, [pc, #172]	; (80007e4 <_ZL12MX_GPIO_Initv+0x128>)
 8000738:	2200      	movs	r2, #0
 800073a:	2189      	movs	r1, #137	; 0x89
 800073c:	0018      	movs	r0, r3
 800073e:	f001 fb80 	bl	8001e42 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ISO_CHUTE_Pin ISO_DROGUE_Pin */
  GPIO_InitStruct.Pin = ISO_CHUTE_Pin|ISO_DROGUE_Pin;
 8000742:	193b      	adds	r3, r7, r4
 8000744:	2218      	movs	r2, #24
 8000746:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000748:	193b      	adds	r3, r7, r4
 800074a:	2200      	movs	r2, #0
 800074c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	193b      	adds	r3, r7, r4
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000754:	193a      	adds	r2, r7, r4
 8000756:	2390      	movs	r3, #144	; 0x90
 8000758:	05db      	lsls	r3, r3, #23
 800075a:	0011      	movs	r1, r2
 800075c:	0018      	movs	r0, r3
 800075e:	f001 f9eb 	bl	8001b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCM_DIR_Pin DCM_ON_Pin LA_IN1_Pin LA_IN2_Pin */
  GPIO_InitStruct.Pin = DCM_DIR_Pin|DCM_ON_Pin|LA_IN1_Pin|LA_IN2_Pin;
 8000762:	0021      	movs	r1, r4
 8000764:	187b      	adds	r3, r7, r1
 8000766:	22e8      	movs	r2, #232	; 0xe8
 8000768:	0092      	lsls	r2, r2, #2
 800076a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076c:	187b      	adds	r3, r7, r1
 800076e:	2201      	movs	r2, #1
 8000770:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	187b      	adds	r3, r7, r1
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000778:	187b      	adds	r3, r7, r1
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077e:	000c      	movs	r4, r1
 8000780:	187a      	adds	r2, r7, r1
 8000782:	2390      	movs	r3, #144	; 0x90
 8000784:	05db      	lsls	r3, r3, #23
 8000786:	0011      	movs	r1, r2
 8000788:	0018      	movs	r0, r3
 800078a:	f001 f9d5 	bl	8001b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin SENSOR_ON_Pin ACOK_Pin */
  GPIO_InitStruct.Pin = LED_Pin|SENSOR_ON_Pin|ACOK_Pin;
 800078e:	0021      	movs	r1, r4
 8000790:	187b      	adds	r3, r7, r1
 8000792:	2289      	movs	r2, #137	; 0x89
 8000794:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000796:	187b      	adds	r3, r7, r1
 8000798:	2201      	movs	r2, #1
 800079a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	187b      	adds	r3, r7, r1
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	187b      	adds	r3, r7, r1
 80007a4:	2200      	movs	r2, #0
 80007a6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a8:	000c      	movs	r4, r1
 80007aa:	187b      	adds	r3, r7, r1
 80007ac:	4a0d      	ldr	r2, [pc, #52]	; (80007e4 <_ZL12MX_GPIO_Initv+0x128>)
 80007ae:	0019      	movs	r1, r3
 80007b0:	0010      	movs	r0, r2
 80007b2:	f001 f9c1 	bl	8001b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSOR2_Pin SENSOR1_Pin */
  GPIO_InitStruct.Pin = SENSOR2_Pin|SENSOR1_Pin;
 80007b6:	0021      	movs	r1, r4
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	2230      	movs	r2, #48	; 0x30
 80007bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007be:	187b      	adds	r3, r7, r1
 80007c0:	2200      	movs	r2, #0
 80007c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	187b      	adds	r3, r7, r1
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ca:	187b      	adds	r3, r7, r1
 80007cc:	4a05      	ldr	r2, [pc, #20]	; (80007e4 <_ZL12MX_GPIO_Initv+0x128>)
 80007ce:	0019      	movs	r1, r3
 80007d0:	0010      	movs	r0, r2
 80007d2:	f001 f9b1 	bl	8001b38 <HAL_GPIO_Init>

}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	46bd      	mov	sp, r7
 80007da:	b009      	add	sp, #36	; 0x24
 80007dc:	bd90      	pop	{r4, r7, pc}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	40021000 	.word	0x40021000
 80007e4:	48000400 	.word	0x48000400

080007e8 <_ZL10flightInitv>:

/* USER CODE BEGIN 4 */
void flightInit(void){
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	// start the input capture of PWM
	TIM2_PWM_InputInit();
 80007ec:	f000 f958 	bl	8000aa0 <_Z18TIM2_PWM_InputInitv>
}
 80007f0:	46c0      	nop			; (mov r8, r8)
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <_Z6droguev>:
#include "recoveryFlight.h"
#include "recoveryUtils.h"


// releases the nose cone
void drogue(){
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
	// move the motor until we unlock the cone
	while(sensorState() != SN_LOCK_UNLOCKED){
 8000804:	f000 f864 	bl	80008d0 <_Z11sensorStatev>
 8000808:	0003      	movs	r3, r0
 800080a:	3b02      	subs	r3, #2
 800080c:	1e5a      	subs	r2, r3, #1
 800080e:	4193      	sbcs	r3, r2
 8000810:	b2db      	uxtb	r3, r3
 8000812:	2b00      	cmp	r3, #0
 8000814:	d004      	beq.n	8000820 <_Z6droguev+0x20>
		motorDrive(DCM_FORWARD, DCM_ON);
 8000816:	2101      	movs	r1, #1
 8000818:	2000      	movs	r0, #0
 800081a:	f000 f8a6 	bl	800096a <_Z10motorDrive7DCM_Dir9DCM_State>
	while(sensorState() != SN_LOCK_UNLOCKED){
 800081e:	e7f1      	b.n	8000804 <_Z6droguev+0x4>
	}

	// stop the motor
	motorDrive(DCM_BACKWARD, DCM_OFF);
 8000820:	2100      	movs	r1, #0
 8000822:	2001      	movs	r0, #1
 8000824:	f000 f8a1 	bl	800096a <_Z10motorDrive7DCM_Dir9DCM_State>
}
 8000828:	46c0      	nop			; (mov r8, r8)
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <_Z5chuteR19__ADC_HandleTypeDef>:


// releases the main chute
void chute(ADC_HandleTypeDef &hadc){
 800082e:	b580      	push	{r7, lr}
 8000830:	b082      	sub	sp, #8
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
	// run drogue again
	drogue();
 8000836:	f7ff ffe3 	bl	8000800 <_Z6droguev>

	// if pulled, halt, otherwise pull the chute
	while(linActPos(hadc) != LA_PULL_PULLED){
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	0018      	movs	r0, r3
 800083e:	f000 f87d 	bl	800093c <_Z9linActPosR19__ADC_HandleTypeDef>
 8000842:	0003      	movs	r3, r0
 8000844:	3b01      	subs	r3, #1
 8000846:	1e5a      	subs	r2, r3, #1
 8000848:	4193      	sbcs	r3, r2
 800084a:	b2db      	uxtb	r3, r3
 800084c:	2b00      	cmp	r3, #0
 800084e:	d003      	beq.n	8000858 <_Z5chuteR19__ADC_HandleTypeDef+0x2a>
		LAWrite(LA_RETRACT);
 8000850:	2001      	movs	r0, #1
 8000852:	f000 f8bd 	bl	80009d0 <_Z7LAWrite8LA_State>
	while(linActPos(hadc) != LA_PULL_PULLED){
 8000856:	e7f0      	b.n	800083a <_Z5chuteR19__ADC_HandleTypeDef+0xc>
	}
	if (linActPos(hadc) == LA_PULL_PULLED){
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	0018      	movs	r0, r3
 800085c:	f000 f86e 	bl	800093c <_Z9linActPosR19__ADC_HandleTypeDef>
 8000860:	0003      	movs	r3, r0
 8000862:	3b01      	subs	r3, #1
 8000864:	425a      	negs	r2, r3
 8000866:	4153      	adcs	r3, r2
 8000868:	b2db      	uxtb	r3, r3
 800086a:	2b00      	cmp	r3, #0
 800086c:	d002      	beq.n	8000874 <_Z5chuteR19__ADC_HandleTypeDef+0x46>
		LAWrite(LA_STOP);
 800086e:	2002      	movs	r0, #2
 8000870:	f000 f8ae 	bl	80009d0 <_Z7LAWrite8LA_State>
	}

}
 8000874:	46c0      	nop			; (mov r8, r8)
 8000876:	46bd      	mov	sp, r7
 8000878:	b002      	add	sp, #8
 800087a:	bd80      	pop	{r7, pc}

0800087c <_Z15waitForAvionicsR19__ADC_HandleTypeDef>:


// when recovery board is ARMED, this always runs
int waitForAvionics(ADC_HandleTypeDef &hadc){
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]

	// check drogue status
	if (HAL_GPIO_ReadPin(ISO_DROGUE_GPIO_Port, ISO_DROGUE_Pin) == GPIO_PIN_SET){
 8000884:	2390      	movs	r3, #144	; 0x90
 8000886:	05db      	lsls	r3, r3, #23
 8000888:	2110      	movs	r1, #16
 800088a:	0018      	movs	r0, r3
 800088c:	f001 fabc 	bl	8001e08 <HAL_GPIO_ReadPin>
 8000890:	0003      	movs	r3, r0
 8000892:	3b01      	subs	r3, #1
 8000894:	425a      	negs	r2, r3
 8000896:	4153      	adcs	r3, r2
 8000898:	b2db      	uxtb	r3, r3
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <_Z15waitForAvionicsR19__ADC_HandleTypeDef+0x26>
		drogue();
 800089e:	f7ff ffaf 	bl	8000800 <_Z6droguev>
	}

	// check chute status
	if (HAL_GPIO_ReadPin(ISO_CHUTE_GPIO_Port, ISO_CHUTE_Pin) == GPIO_PIN_SET){
 80008a2:	2390      	movs	r3, #144	; 0x90
 80008a4:	05db      	lsls	r3, r3, #23
 80008a6:	2108      	movs	r1, #8
 80008a8:	0018      	movs	r0, r3
 80008aa:	f001 faad 	bl	8001e08 <HAL_GPIO_ReadPin>
 80008ae:	0003      	movs	r3, r0
 80008b0:	3b01      	subs	r3, #1
 80008b2:	425a      	negs	r2, r3
 80008b4:	4153      	adcs	r3, r2
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d003      	beq.n	80008c4 <_Z15waitForAvionicsR19__ADC_HandleTypeDef+0x48>
		chute(hadc);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	0018      	movs	r0, r3
 80008c0:	f7ff ffb5 	bl	800082e <_Z5chuteR19__ADC_HandleTypeDef>
	}


	return 0;
 80008c4:	2300      	movs	r3, #0
}
 80008c6:	0018      	movs	r0, r3
 80008c8:	46bd      	mov	sp, r7
 80008ca:	b002      	add	sp, #8
 80008cc:	bd80      	pop	{r7, pc}
	...

080008d0 <_Z11sensorStatev>:
 * 	  1		|    1     | LOCKED
 * 	  1		|	 0	   | MOVING
 * 	  0		|    1	   | UNLOCKED
 * 	  0 	| 	 0	   | UNKOWN
 */
SN_LockState sensorState(){
 80008d0:	b590      	push	{r4, r7, lr}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
	SN_LockState state;
	GPIO_PinState sensor1;
	GPIO_PinState sensor2;

	// read the pins to gather each sensor state
	sensor1 = HAL_GPIO_ReadPin(SENSOR1_GPIO_Port, SENSOR1_Pin);
 80008d6:	1dbc      	adds	r4, r7, #6
 80008d8:	4b17      	ldr	r3, [pc, #92]	; (8000938 <_Z11sensorStatev+0x68>)
 80008da:	2120      	movs	r1, #32
 80008dc:	0018      	movs	r0, r3
 80008de:	f001 fa93 	bl	8001e08 <HAL_GPIO_ReadPin>
 80008e2:	0003      	movs	r3, r0
 80008e4:	7023      	strb	r3, [r4, #0]
	sensor2 = HAL_GPIO_ReadPin(SENSOR2_GPIO_Port, SENSOR2_Pin);
 80008e6:	1d7c      	adds	r4, r7, #5
 80008e8:	4b13      	ldr	r3, [pc, #76]	; (8000938 <_Z11sensorStatev+0x68>)
 80008ea:	2110      	movs	r1, #16
 80008ec:	0018      	movs	r0, r3
 80008ee:	f001 fa8b 	bl	8001e08 <HAL_GPIO_ReadPin>
 80008f2:	0003      	movs	r3, r0
 80008f4:	7023      	strb	r3, [r4, #0]

	if (sensor1 == GPIO_PIN_SET){
 80008f6:	1dbb      	adds	r3, r7, #6
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d10b      	bne.n	8000916 <_Z11sensorStatev+0x46>
		if (sensor2 == GPIO_PIN_SET){
 80008fe:	1d7b      	adds	r3, r7, #5
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d103      	bne.n	800090e <_Z11sensorStatev+0x3e>
			// sensor1 = 1, sensor2 = 1
			state = SN_LOCK_LOCKED;
 8000906:	1dfb      	adds	r3, r7, #7
 8000908:	2200      	movs	r2, #0
 800090a:	701a      	strb	r2, [r3, #0]
 800090c:	e00e      	b.n	800092c <_Z11sensorStatev+0x5c>
		}
		else{
			// sensor1 = 1, sensor2 = 0
			state = SN_LOCK_MOVING;
 800090e:	1dfb      	adds	r3, r7, #7
 8000910:	2201      	movs	r2, #1
 8000912:	701a      	strb	r2, [r3, #0]
 8000914:	e00a      	b.n	800092c <_Z11sensorStatev+0x5c>
		}
	}
	else{
		if (sensor2 == GPIO_PIN_SET){
 8000916:	1d7b      	adds	r3, r7, #5
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b01      	cmp	r3, #1
 800091c:	d103      	bne.n	8000926 <_Z11sensorStatev+0x56>
			// sensor1 = 0, sensor2 = 1
			state = SN_LOCK_UNLOCKED;
 800091e:	1dfb      	adds	r3, r7, #7
 8000920:	2202      	movs	r2, #2
 8000922:	701a      	strb	r2, [r3, #0]
 8000924:	e002      	b.n	800092c <_Z11sensorStatev+0x5c>
		}
		else{
			// sensor1 = 0, sensor2 = 0
			state = SN_LOCK_UNKOWN;
 8000926:	1dfb      	adds	r3, r7, #7
 8000928:	2203      	movs	r2, #3
 800092a:	701a      	strb	r2, [r3, #0]
		}
	}
	return state;
 800092c:	1dfb      	adds	r3, r7, #7
 800092e:	781b      	ldrb	r3, [r3, #0]
}
 8000930:	0018      	movs	r0, r3
 8000932:	46bd      	mov	sp, r7
 8000934:	b003      	add	sp, #12
 8000936:	bd90      	pop	{r4, r7, pc}
 8000938:	48000400 	.word	0x48000400

0800093c <_Z9linActPosR19__ADC_HandleTypeDef>:
	}
}


// checks the pulled/unpulled status of the linear actuator
LA_PullState linActPos(ADC_HandleTypeDef &hadc){
 800093c:	b5b0      	push	{r4, r5, r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	uint16_t position;
	position = analogRead(hadc);
 8000944:	250e      	movs	r5, #14
 8000946:	197c      	adds	r4, r7, r5
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	0018      	movs	r0, r3
 800094c:	f000 f88a 	bl	8000a64 <_Z10analogReadR19__ADC_HandleTypeDef>
 8000950:	0003      	movs	r3, r0
 8000952:	8023      	strh	r3, [r4, #0]
	if (position < LIN_ACT_PULLED){
 8000954:	197b      	adds	r3, r7, r5
 8000956:	881b      	ldrh	r3, [r3, #0]
 8000958:	2b13      	cmp	r3, #19
 800095a:	d801      	bhi.n	8000960 <_Z9linActPosR19__ADC_HandleTypeDef+0x24>
		return LA_PULL_PULLED;
 800095c:	2301      	movs	r3, #1
 800095e:	e000      	b.n	8000962 <_Z9linActPosR19__ADC_HandleTypeDef+0x26>
	}
	else{
		return LA_PULL_UNPULLED;
 8000960:	2300      	movs	r3, #0
	}
}
 8000962:	0018      	movs	r0, r3
 8000964:	46bd      	mov	sp, r7
 8000966:	b004      	add	sp, #16
 8000968:	bdb0      	pop	{r4, r5, r7, pc}

0800096a <_Z10motorDrive7DCM_Dir9DCM_State>:


// moves the motor
void motorDrive(DCM_Dir dir, DCM_State state){
 800096a:	b580      	push	{r7, lr}
 800096c:	b082      	sub	sp, #8
 800096e:	af00      	add	r7, sp, #0
 8000970:	0002      	movs	r2, r0
 8000972:	1dfb      	adds	r3, r7, #7
 8000974:	701a      	strb	r2, [r3, #0]
 8000976:	1dbb      	adds	r3, r7, #6
 8000978:	1c0a      	adds	r2, r1, #0
 800097a:	701a      	strb	r2, [r3, #0]
//	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
//	TIM3->CCR1 = 50;


	// choose direction
	if (dir == DCM_FORWARD){
 800097c:	1dfb      	adds	r3, r7, #7
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d107      	bne.n	8000994 <_Z10motorDrive7DCM_Dir9DCM_State+0x2a>
		HAL_GPIO_WritePin(DCM_DIR_GPIO_Port, DCM_DIR_Pin, GPIO_PIN_SET);
 8000984:	2390      	movs	r3, #144	; 0x90
 8000986:	05db      	lsls	r3, r3, #23
 8000988:	2201      	movs	r2, #1
 800098a:	2120      	movs	r1, #32
 800098c:	0018      	movs	r0, r3
 800098e:	f001 fa58 	bl	8001e42 <HAL_GPIO_WritePin>
 8000992:	e006      	b.n	80009a2 <_Z10motorDrive7DCM_Dir9DCM_State+0x38>
	}
	else{
		HAL_GPIO_WritePin(DCM_DIR_GPIO_Port, DCM_DIR_Pin, GPIO_PIN_RESET);
 8000994:	2390      	movs	r3, #144	; 0x90
 8000996:	05db      	lsls	r3, r3, #23
 8000998:	2200      	movs	r2, #0
 800099a:	2120      	movs	r1, #32
 800099c:	0018      	movs	r0, r3
 800099e:	f001 fa50 	bl	8001e42 <HAL_GPIO_WritePin>
	}

	// turn motor on or off
	if (state == DCM_ON){
 80009a2:	1dbb      	adds	r3, r7, #6
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d107      	bne.n	80009ba <_Z10motorDrive7DCM_Dir9DCM_State+0x50>
		HAL_GPIO_WritePin(DCM_ON_GPIO_Port, DCM_ON_Pin, GPIO_PIN_SET);
 80009aa:	2390      	movs	r3, #144	; 0x90
 80009ac:	05db      	lsls	r3, r3, #23
 80009ae:	2201      	movs	r2, #1
 80009b0:	2180      	movs	r1, #128	; 0x80
 80009b2:	0018      	movs	r0, r3
 80009b4:	f001 fa45 	bl	8001e42 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(DCM_ON_GPIO_Port, DCM_ON_Pin, GPIO_PIN_RESET);
	}
}
 80009b8:	e006      	b.n	80009c8 <_Z10motorDrive7DCM_Dir9DCM_State+0x5e>
		HAL_GPIO_WritePin(DCM_ON_GPIO_Port, DCM_ON_Pin, GPIO_PIN_RESET);
 80009ba:	2390      	movs	r3, #144	; 0x90
 80009bc:	05db      	lsls	r3, r3, #23
 80009be:	2200      	movs	r2, #0
 80009c0:	2180      	movs	r1, #128	; 0x80
 80009c2:	0018      	movs	r0, r3
 80009c4:	f001 fa3d 	bl	8001e42 <HAL_GPIO_WritePin>
}
 80009c8:	46c0      	nop			; (mov r8, r8)
 80009ca:	46bd      	mov	sp, r7
 80009cc:	b002      	add	sp, #8
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <_Z7LAWrite8LA_State>:

	return input[0] / DCM_PULSE;
}

// function to drive the LA
void LAWrite(LA_State state){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	0002      	movs	r2, r0
 80009d8:	1dfb      	adds	r3, r7, #7
 80009da:	701a      	strb	r2, [r3, #0]
	*/
	GPIO_PinState IN1;
	GPIO_PinState IN2;

	// decide on inputs
	switch(state){
 80009dc:	1dfb      	adds	r3, r7, #7
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d00c      	beq.n	80009fe <_Z7LAWrite8LA_State+0x2e>
 80009e4:	2b02      	cmp	r3, #2
 80009e6:	d013      	beq.n	8000a10 <_Z7LAWrite8LA_State+0x40>
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d11a      	bne.n	8000a22 <_Z7LAWrite8LA_State+0x52>

	case LA_EXTEND:
		IN1 = GPIO_PIN_SET;
 80009ec:	230f      	movs	r3, #15
 80009ee:	18fb      	adds	r3, r7, r3
 80009f0:	2201      	movs	r2, #1
 80009f2:	701a      	strb	r2, [r3, #0]
		IN2 = GPIO_PIN_RESET;
 80009f4:	230e      	movs	r3, #14
 80009f6:	18fb      	adds	r3, r7, r3
 80009f8:	2200      	movs	r2, #0
 80009fa:	701a      	strb	r2, [r3, #0]
		break;
 80009fc:	e01a      	b.n	8000a34 <_Z7LAWrite8LA_State+0x64>

	case LA_RETRACT:
		IN1 = GPIO_PIN_RESET;
 80009fe:	230f      	movs	r3, #15
 8000a00:	18fb      	adds	r3, r7, r3
 8000a02:	2200      	movs	r2, #0
 8000a04:	701a      	strb	r2, [r3, #0]
		IN2 = GPIO_PIN_SET;
 8000a06:	230e      	movs	r3, #14
 8000a08:	18fb      	adds	r3, r7, r3
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	701a      	strb	r2, [r3, #0]
		break;
 8000a0e:	e011      	b.n	8000a34 <_Z7LAWrite8LA_State+0x64>

	case LA_STOP:
		IN1 = GPIO_PIN_RESET;
 8000a10:	230f      	movs	r3, #15
 8000a12:	18fb      	adds	r3, r7, r3
 8000a14:	2200      	movs	r2, #0
 8000a16:	701a      	strb	r2, [r3, #0]
		IN2 = GPIO_PIN_RESET;
 8000a18:	230e      	movs	r3, #14
 8000a1a:	18fb      	adds	r3, r7, r3
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	701a      	strb	r2, [r3, #0]
		break;
 8000a20:	e008      	b.n	8000a34 <_Z7LAWrite8LA_State+0x64>

	default:
		IN1 = GPIO_PIN_RESET;
 8000a22:	230f      	movs	r3, #15
 8000a24:	18fb      	adds	r3, r7, r3
 8000a26:	2200      	movs	r2, #0
 8000a28:	701a      	strb	r2, [r3, #0]
		IN2 = GPIO_PIN_RESET;
 8000a2a:	230e      	movs	r3, #14
 8000a2c:	18fb      	adds	r3, r7, r3
 8000a2e:	2200      	movs	r2, #0
 8000a30:	701a      	strb	r2, [r3, #0]
		break;
 8000a32:	46c0      	nop			; (mov r8, r8)
	}

	HAL_GPIO_WritePin(LA_IN1_GPIO_Port, LA_IN1_Pin, IN1);
 8000a34:	230f      	movs	r3, #15
 8000a36:	18fb      	adds	r3, r7, r3
 8000a38:	781a      	ldrb	r2, [r3, #0]
 8000a3a:	2380      	movs	r3, #128	; 0x80
 8000a3c:	0059      	lsls	r1, r3, #1
 8000a3e:	2390      	movs	r3, #144	; 0x90
 8000a40:	05db      	lsls	r3, r3, #23
 8000a42:	0018      	movs	r0, r3
 8000a44:	f001 f9fd 	bl	8001e42 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LA_IN2_GPIO_Port, LA_IN2_Pin, IN2);
 8000a48:	230e      	movs	r3, #14
 8000a4a:	18fb      	adds	r3, r7, r3
 8000a4c:	781a      	ldrb	r2, [r3, #0]
 8000a4e:	2380      	movs	r3, #128	; 0x80
 8000a50:	0099      	lsls	r1, r3, #2
 8000a52:	2390      	movs	r3, #144	; 0x90
 8000a54:	05db      	lsls	r3, r3, #23
 8000a56:	0018      	movs	r0, r3
 8000a58:	f001 f9f3 	bl	8001e42 <HAL_GPIO_WritePin>

}
 8000a5c:	46c0      	nop			; (mov r8, r8)
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	b004      	add	sp, #16
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <_Z10analogReadR19__ADC_HandleTypeDef>:
#include "main.h"
#include <cstring>
#include <cstdio>

// function to read analog inputs, and return the output
uint16_t analogRead(ADC_HandleTypeDef &hadc){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	uint16_t raw;
	//start the conversion of ADC value
	HAL_ADC_Start(&hadc);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f000 fc34 	bl	80012dc <HAL_ADC_Start>
	// stall the processor until the ADC is done
	HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000a74:	2301      	movs	r3, #1
 8000a76:	425a      	negs	r2, r3
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	0011      	movs	r1, r2
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f000 fc81 	bl	8001384 <HAL_ADC_PollForConversion>
	raw = HAL_ADC_GetValue(&hadc);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	0018      	movs	r0, r3
 8000a86:	f000 fd0f 	bl	80014a8 <HAL_ADC_GetValue>
 8000a8a:	0002      	movs	r2, r0
 8000a8c:	210e      	movs	r1, #14
 8000a8e:	187b      	adds	r3, r7, r1
 8000a90:	801a      	strh	r2, [r3, #0]

	return raw;
 8000a92:	187b      	adds	r3, r7, r1
 8000a94:	881b      	ldrh	r3, [r3, #0]
}
 8000a96:	0018      	movs	r0, r3
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	b004      	add	sp, #16
 8000a9c:	bd80      	pop	{r7, pc}
	...

08000aa0 <_Z18TIM2_PWM_InputInitv>:
void serialSend(char * msg, UART_HandleTypeDef &huart2){
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
}

// function to set up and read the PWM signal on the proper GPIO
void TIM2_PWM_InputInit(){
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
	// GPIOA clock already started
	// set pin PA0 in alternate function mode
	GPIOA->MODER |= GPIO_MODER_MODER0_1;
 8000aa6:	2390      	movs	r3, #144	; 0x90
 8000aa8:	05db      	lsls	r3, r3, #23
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	2390      	movs	r3, #144	; 0x90
 8000aae:	05db      	lsls	r3, r3, #23
 8000ab0:	2102      	movs	r1, #2
 8000ab2:	430a      	orrs	r2, r1
 8000ab4:	601a      	str	r2, [r3, #0]

	// set pin PA0 to AF2 form TIM2 CH1
	GPIOA->AFR[0] |= (0x2UL << GPIO_AFRL_AFRL0_Pos);
 8000ab6:	2390      	movs	r3, #144	; 0x90
 8000ab8:	05db      	lsls	r3, r3, #23
 8000aba:	6a1a      	ldr	r2, [r3, #32]
 8000abc:	2390      	movs	r3, #144	; 0x90
 8000abe:	05db      	lsls	r3, r3, #23
 8000ac0:	2102      	movs	r1, #2
 8000ac2:	430a      	orrs	r2, r1
 8000ac4:	621a      	str	r2, [r3, #32]

	__HAL_RCC_TIM2_CLK_ENABLE();
 8000ac6:	4b18      	ldr	r3, [pc, #96]	; (8000b28 <_Z18TIM2_PWM_InputInitv+0x88>)
 8000ac8:	69da      	ldr	r2, [r3, #28]
 8000aca:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <_Z18TIM2_PWM_InputInitv+0x88>)
 8000acc:	2101      	movs	r1, #1
 8000ace:	430a      	orrs	r2, r1
 8000ad0:	61da      	str	r2, [r3, #28]
 8000ad2:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <_Z18TIM2_PWM_InputInitv+0x88>)
 8000ad4:	69db      	ldr	r3, [r3, #28]
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	4013      	ands	r3, r2
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
	//setting TIM2 for input capture
	// with channel 1 mapping to TI1 (CC1S = 01)
	// and channel 2 mapped to TI1 (CC2S = 10)
	TIM2->CCMR1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_1;
 8000ade:	2380      	movs	r3, #128	; 0x80
 8000ae0:	05db      	lsls	r3, r3, #23
 8000ae2:	699a      	ldr	r2, [r3, #24]
 8000ae4:	2380      	movs	r3, #128	; 0x80
 8000ae6:	05db      	lsls	r3, r3, #23
 8000ae8:	4910      	ldr	r1, [pc, #64]	; (8000b2c <_Z18TIM2_PWM_InputInitv+0x8c>)
 8000aea:	430a      	orrs	r2, r1
 8000aec:	619a      	str	r2, [r3, #24]

	// setting slave mode (SMS = 100)
	// trigger input (TS = 101)
	TIM2->SMCR |= TIM_SMCR_TS_0 | TIM_SMCR_TS_2 |TIM_SMCR_SMS_2;
 8000aee:	2380      	movs	r3, #128	; 0x80
 8000af0:	05db      	lsls	r3, r3, #23
 8000af2:	689a      	ldr	r2, [r3, #8]
 8000af4:	2380      	movs	r3, #128	; 0x80
 8000af6:	05db      	lsls	r3, r3, #23
 8000af8:	2154      	movs	r1, #84	; 0x54
 8000afa:	430a      	orrs	r2, r1
 8000afc:	609a      	str	r2, [r3, #8]

	// setting rising edge polarity for channel 1 (CC1P = 0, reset state and CC1NP = 0, reset value)
	// setting falling edge polarity for channel 2 (CC2P = 1 and CC2NP = 0, reset value)
	// enabling capture mode in channels 1 and 2 (CC1E = 1) and (CC2E = 1)
	TIM2->CCER |= TIM_CCER_CC2P | TIM_CCER_CC1E | TIM_CCER_CC2E;
 8000afe:	2380      	movs	r3, #128	; 0x80
 8000b00:	05db      	lsls	r3, r3, #23
 8000b02:	6a1a      	ldr	r2, [r3, #32]
 8000b04:	2380      	movs	r3, #128	; 0x80
 8000b06:	05db      	lsls	r3, r3, #23
 8000b08:	2131      	movs	r1, #49	; 0x31
 8000b0a:	430a      	orrs	r2, r1
 8000b0c:	621a      	str	r2, [r3, #32]

	TIM2->CR1 |= TIM_CR1_CEN;
 8000b0e:	2380      	movs	r3, #128	; 0x80
 8000b10:	05db      	lsls	r3, r3, #23
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	2380      	movs	r3, #128	; 0x80
 8000b16:	05db      	lsls	r3, r3, #23
 8000b18:	2101      	movs	r1, #1
 8000b1a:	430a      	orrs	r2, r1
 8000b1c:	601a      	str	r2, [r3, #0]

}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	46bd      	mov	sp, r7
 8000b22:	b002      	add	sp, #8
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	40021000 	.word	0x40021000
 8000b2c:	00000201 	.word	0x00000201

08000b30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b36:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <HAL_MspInit+0x44>)
 8000b38:	699a      	ldr	r2, [r3, #24]
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <HAL_MspInit+0x44>)
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	430a      	orrs	r2, r1
 8000b40:	619a      	str	r2, [r3, #24]
 8000b42:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <HAL_MspInit+0x44>)
 8000b44:	699b      	ldr	r3, [r3, #24]
 8000b46:	2201      	movs	r2, #1
 8000b48:	4013      	ands	r3, r2
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4e:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <HAL_MspInit+0x44>)
 8000b50:	69da      	ldr	r2, [r3, #28]
 8000b52:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <HAL_MspInit+0x44>)
 8000b54:	2180      	movs	r1, #128	; 0x80
 8000b56:	0549      	lsls	r1, r1, #21
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	61da      	str	r2, [r3, #28]
 8000b5c:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <HAL_MspInit+0x44>)
 8000b5e:	69da      	ldr	r2, [r3, #28]
 8000b60:	2380      	movs	r3, #128	; 0x80
 8000b62:	055b      	lsls	r3, r3, #21
 8000b64:	4013      	ands	r3, r2
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	b002      	add	sp, #8
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	40021000 	.word	0x40021000

08000b78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b78:	b590      	push	{r4, r7, lr}
 8000b7a:	b08b      	sub	sp, #44	; 0x2c
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	2314      	movs	r3, #20
 8000b82:	18fb      	adds	r3, r7, r3
 8000b84:	0018      	movs	r0, r3
 8000b86:	2314      	movs	r3, #20
 8000b88:	001a      	movs	r2, r3
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	f002 fe06 	bl	800379c <memset>
  if(hadc->Instance==ADC1)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a28      	ldr	r2, [pc, #160]	; (8000c38 <HAL_ADC_MspInit+0xc0>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d149      	bne.n	8000c2e <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b9a:	4b28      	ldr	r3, [pc, #160]	; (8000c3c <HAL_ADC_MspInit+0xc4>)
 8000b9c:	699a      	ldr	r2, [r3, #24]
 8000b9e:	4b27      	ldr	r3, [pc, #156]	; (8000c3c <HAL_ADC_MspInit+0xc4>)
 8000ba0:	2180      	movs	r1, #128	; 0x80
 8000ba2:	0089      	lsls	r1, r1, #2
 8000ba4:	430a      	orrs	r2, r1
 8000ba6:	619a      	str	r2, [r3, #24]
 8000ba8:	4b24      	ldr	r3, [pc, #144]	; (8000c3c <HAL_ADC_MspInit+0xc4>)
 8000baa:	699a      	ldr	r2, [r3, #24]
 8000bac:	2380      	movs	r3, #128	; 0x80
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	613b      	str	r3, [r7, #16]
 8000bb4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb6:	4b21      	ldr	r3, [pc, #132]	; (8000c3c <HAL_ADC_MspInit+0xc4>)
 8000bb8:	695a      	ldr	r2, [r3, #20]
 8000bba:	4b20      	ldr	r3, [pc, #128]	; (8000c3c <HAL_ADC_MspInit+0xc4>)
 8000bbc:	2180      	movs	r1, #128	; 0x80
 8000bbe:	0289      	lsls	r1, r1, #10
 8000bc0:	430a      	orrs	r2, r1
 8000bc2:	615a      	str	r2, [r3, #20]
 8000bc4:	4b1d      	ldr	r3, [pc, #116]	; (8000c3c <HAL_ADC_MspInit+0xc4>)
 8000bc6:	695a      	ldr	r2, [r3, #20]
 8000bc8:	2380      	movs	r3, #128	; 0x80
 8000bca:	029b      	lsls	r3, r3, #10
 8000bcc:	4013      	ands	r3, r2
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd2:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <HAL_ADC_MspInit+0xc4>)
 8000bd4:	695a      	ldr	r2, [r3, #20]
 8000bd6:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <HAL_ADC_MspInit+0xc4>)
 8000bd8:	2180      	movs	r1, #128	; 0x80
 8000bda:	02c9      	lsls	r1, r1, #11
 8000bdc:	430a      	orrs	r2, r1
 8000bde:	615a      	str	r2, [r3, #20]
 8000be0:	4b16      	ldr	r3, [pc, #88]	; (8000c3c <HAL_ADC_MspInit+0xc4>)
 8000be2:	695a      	ldr	r2, [r3, #20]
 8000be4:	2380      	movs	r3, #128	; 0x80
 8000be6:	02db      	lsls	r3, r3, #11
 8000be8:	4013      	ands	r3, r2
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration    
    PA1     ------> ADC_IN1
    PB1     ------> ADC_IN9 
    */
    GPIO_InitStruct.Pin = LA_POS_Pin;
 8000bee:	2414      	movs	r4, #20
 8000bf0:	193b      	adds	r3, r7, r4
 8000bf2:	2202      	movs	r2, #2
 8000bf4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bf6:	193b      	adds	r3, r7, r4
 8000bf8:	2203      	movs	r2, #3
 8000bfa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	193b      	adds	r3, r7, r4
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(LA_POS_GPIO_Port, &GPIO_InitStruct);
 8000c02:	193a      	adds	r2, r7, r4
 8000c04:	2390      	movs	r3, #144	; 0x90
 8000c06:	05db      	lsls	r3, r3, #23
 8000c08:	0011      	movs	r1, r2
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	f000 ff94 	bl	8001b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BATT_READ_Pin;
 8000c10:	193b      	adds	r3, r7, r4
 8000c12:	2202      	movs	r2, #2
 8000c14:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c16:	193b      	adds	r3, r7, r4
 8000c18:	2203      	movs	r2, #3
 8000c1a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	193b      	adds	r3, r7, r4
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(BATT_READ_GPIO_Port, &GPIO_InitStruct);
 8000c22:	193b      	adds	r3, r7, r4
 8000c24:	4a06      	ldr	r2, [pc, #24]	; (8000c40 <HAL_ADC_MspInit+0xc8>)
 8000c26:	0019      	movs	r1, r3
 8000c28:	0010      	movs	r0, r2
 8000c2a:	f000 ff85 	bl	8001b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	46bd      	mov	sp, r7
 8000c32:	b00b      	add	sp, #44	; 0x2c
 8000c34:	bd90      	pop	{r4, r7, pc}
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	40012400 	.word	0x40012400
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	48000400 	.word	0x48000400

08000c44 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08a      	sub	sp, #40	; 0x28
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	2314      	movs	r3, #20
 8000c4e:	18fb      	adds	r3, r7, r3
 8000c50:	0018      	movs	r0, r3
 8000c52:	2314      	movs	r3, #20
 8000c54:	001a      	movs	r2, r3
 8000c56:	2100      	movs	r1, #0
 8000c58:	f002 fda0 	bl	800379c <memset>
  if(hcan->Instance==CAN)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a1d      	ldr	r2, [pc, #116]	; (8000cd8 <HAL_CAN_MspInit+0x94>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d133      	bne.n	8000cce <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c66:	4b1d      	ldr	r3, [pc, #116]	; (8000cdc <HAL_CAN_MspInit+0x98>)
 8000c68:	69da      	ldr	r2, [r3, #28]
 8000c6a:	4b1c      	ldr	r3, [pc, #112]	; (8000cdc <HAL_CAN_MspInit+0x98>)
 8000c6c:	2180      	movs	r1, #128	; 0x80
 8000c6e:	0489      	lsls	r1, r1, #18
 8000c70:	430a      	orrs	r2, r1
 8000c72:	61da      	str	r2, [r3, #28]
 8000c74:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <HAL_CAN_MspInit+0x98>)
 8000c76:	69da      	ldr	r2, [r3, #28]
 8000c78:	2380      	movs	r3, #128	; 0x80
 8000c7a:	049b      	lsls	r3, r3, #18
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c82:	4b16      	ldr	r3, [pc, #88]	; (8000cdc <HAL_CAN_MspInit+0x98>)
 8000c84:	695a      	ldr	r2, [r3, #20]
 8000c86:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <HAL_CAN_MspInit+0x98>)
 8000c88:	2180      	movs	r1, #128	; 0x80
 8000c8a:	0289      	lsls	r1, r1, #10
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	615a      	str	r2, [r3, #20]
 8000c90:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <HAL_CAN_MspInit+0x98>)
 8000c92:	695a      	ldr	r2, [r3, #20]
 8000c94:	2380      	movs	r3, #128	; 0x80
 8000c96:	029b      	lsls	r3, r3, #10
 8000c98:	4013      	ands	r3, r2
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c9e:	2114      	movs	r1, #20
 8000ca0:	187b      	adds	r3, r7, r1
 8000ca2:	22c0      	movs	r2, #192	; 0xc0
 8000ca4:	0152      	lsls	r2, r2, #5
 8000ca6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca8:	187b      	adds	r3, r7, r1
 8000caa:	2202      	movs	r2, #2
 8000cac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	187b      	adds	r3, r7, r1
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cb4:	187b      	adds	r3, r7, r1
 8000cb6:	2203      	movs	r2, #3
 8000cb8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000cba:	187b      	adds	r3, r7, r1
 8000cbc:	2204      	movs	r2, #4
 8000cbe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc0:	187a      	adds	r2, r7, r1
 8000cc2:	2390      	movs	r3, #144	; 0x90
 8000cc4:	05db      	lsls	r3, r3, #23
 8000cc6:	0011      	movs	r1, r2
 8000cc8:	0018      	movs	r0, r3
 8000cca:	f000 ff35 	bl	8001b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	b00a      	add	sp, #40	; 0x28
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	40006400 	.word	0x40006400
 8000cdc:	40021000 	.word	0x40021000

08000ce0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a09      	ldr	r2, [pc, #36]	; (8000d14 <HAL_TIM_PWM_MspInit+0x34>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d10b      	bne.n	8000d0a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <HAL_TIM_PWM_MspInit+0x38>)
 8000cf4:	69da      	ldr	r2, [r3, #28]
 8000cf6:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <HAL_TIM_PWM_MspInit+0x38>)
 8000cf8:	2102      	movs	r1, #2
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	61da      	str	r2, [r3, #28]
 8000cfe:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <HAL_TIM_PWM_MspInit+0x38>)
 8000d00:	69db      	ldr	r3, [r3, #28]
 8000d02:	2202      	movs	r2, #2
 8000d04:	4013      	ands	r3, r2
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	b004      	add	sp, #16
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	40000400 	.word	0x40000400
 8000d18:	40021000 	.word	0x40021000

08000d1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <HAL_TIM_Base_MspInit+0x38>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d10d      	bne.n	8000d4a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000d2e:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <HAL_TIM_Base_MspInit+0x3c>)
 8000d30:	699a      	ldr	r2, [r3, #24]
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <HAL_TIM_Base_MspInit+0x3c>)
 8000d34:	2180      	movs	r1, #128	; 0x80
 8000d36:	0289      	lsls	r1, r1, #10
 8000d38:	430a      	orrs	r2, r1
 8000d3a:	619a      	str	r2, [r3, #24]
 8000d3c:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <HAL_TIM_Base_MspInit+0x3c>)
 8000d3e:	699a      	ldr	r2, [r3, #24]
 8000d40:	2380      	movs	r3, #128	; 0x80
 8000d42:	029b      	lsls	r3, r3, #10
 8000d44:	4013      	ands	r3, r2
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000d4a:	46c0      	nop			; (mov r8, r8)
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	b004      	add	sp, #16
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	46c0      	nop			; (mov r8, r8)
 8000d54:	40014400 	.word	0x40014400
 8000d58:	40021000 	.word	0x40021000

08000d5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08a      	sub	sp, #40	; 0x28
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	2314      	movs	r3, #20
 8000d66:	18fb      	adds	r3, r7, r3
 8000d68:	0018      	movs	r0, r3
 8000d6a:	2314      	movs	r3, #20
 8000d6c:	001a      	movs	r2, r3
 8000d6e:	2100      	movs	r1, #0
 8000d70:	f002 fd14 	bl	800379c <memset>
  if(htim->Instance==TIM3)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a2b      	ldr	r2, [pc, #172]	; (8000e28 <HAL_TIM_MspPostInit+0xcc>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d125      	bne.n	8000dca <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7e:	4b2b      	ldr	r3, [pc, #172]	; (8000e2c <HAL_TIM_MspPostInit+0xd0>)
 8000d80:	695a      	ldr	r2, [r3, #20]
 8000d82:	4b2a      	ldr	r3, [pc, #168]	; (8000e2c <HAL_TIM_MspPostInit+0xd0>)
 8000d84:	2180      	movs	r1, #128	; 0x80
 8000d86:	0289      	lsls	r1, r1, #10
 8000d88:	430a      	orrs	r2, r1
 8000d8a:	615a      	str	r2, [r3, #20]
 8000d8c:	4b27      	ldr	r3, [pc, #156]	; (8000e2c <HAL_TIM_MspPostInit+0xd0>)
 8000d8e:	695a      	ldr	r2, [r3, #20]
 8000d90:	2380      	movs	r3, #128	; 0x80
 8000d92:	029b      	lsls	r3, r3, #10
 8000d94:	4013      	ands	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = DCM_PWM_Pin;
 8000d9a:	2114      	movs	r1, #20
 8000d9c:	187b      	adds	r3, r7, r1
 8000d9e:	2240      	movs	r2, #64	; 0x40
 8000da0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da2:	187b      	adds	r3, r7, r1
 8000da4:	2202      	movs	r2, #2
 8000da6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	187b      	adds	r3, r7, r1
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dae:	187b      	adds	r3, r7, r1
 8000db0:	2200      	movs	r2, #0
 8000db2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000db4:	187b      	adds	r3, r7, r1
 8000db6:	2201      	movs	r2, #1
 8000db8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DCM_PWM_GPIO_Port, &GPIO_InitStruct);
 8000dba:	187a      	adds	r2, r7, r1
 8000dbc:	2390      	movs	r3, #144	; 0x90
 8000dbe:	05db      	lsls	r3, r3, #23
 8000dc0:	0011      	movs	r1, r2
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f000 feb8 	bl	8001b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8000dc8:	e029      	b.n	8000e1e <HAL_TIM_MspPostInit+0xc2>
  else if(htim->Instance==TIM16)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a18      	ldr	r2, [pc, #96]	; (8000e30 <HAL_TIM_MspPostInit+0xd4>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d124      	bne.n	8000e1e <HAL_TIM_MspPostInit+0xc2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd4:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <HAL_TIM_MspPostInit+0xd0>)
 8000dd6:	695a      	ldr	r2, [r3, #20]
 8000dd8:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <HAL_TIM_MspPostInit+0xd0>)
 8000dda:	2180      	movs	r1, #128	; 0x80
 8000ddc:	02c9      	lsls	r1, r1, #11
 8000dde:	430a      	orrs	r2, r1
 8000de0:	615a      	str	r2, [r3, #20]
 8000de2:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <HAL_TIM_MspPostInit+0xd0>)
 8000de4:	695a      	ldr	r2, [r3, #20]
 8000de6:	2380      	movs	r3, #128	; 0x80
 8000de8:	02db      	lsls	r3, r3, #11
 8000dea:	4013      	ands	r3, r2
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPKR_Pin;
 8000df0:	2114      	movs	r1, #20
 8000df2:	187b      	adds	r3, r7, r1
 8000df4:	2280      	movs	r2, #128	; 0x80
 8000df6:	0052      	lsls	r2, r2, #1
 8000df8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	187b      	adds	r3, r7, r1
 8000dfc:	2202      	movs	r2, #2
 8000dfe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	187b      	adds	r3, r7, r1
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	187b      	adds	r3, r7, r1
 8000e08:	2200      	movs	r2, #0
 8000e0a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8000e0c:	187b      	adds	r3, r7, r1
 8000e0e:	2202      	movs	r2, #2
 8000e10:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SPKR_GPIO_Port, &GPIO_InitStruct);
 8000e12:	187b      	adds	r3, r7, r1
 8000e14:	4a07      	ldr	r2, [pc, #28]	; (8000e34 <HAL_TIM_MspPostInit+0xd8>)
 8000e16:	0019      	movs	r1, r3
 8000e18:	0010      	movs	r0, r2
 8000e1a:	f000 fe8d 	bl	8001b38 <HAL_GPIO_Init>
}
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	46bd      	mov	sp, r7
 8000e22:	b00a      	add	sp, #40	; 0x28
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	46c0      	nop			; (mov r8, r8)
 8000e28:	40000400 	.word	0x40000400
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	40014400 	.word	0x40014400
 8000e34:	48000400 	.word	0x48000400

08000e38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08a      	sub	sp, #40	; 0x28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	2314      	movs	r3, #20
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	0018      	movs	r0, r3
 8000e46:	2314      	movs	r3, #20
 8000e48:	001a      	movs	r2, r3
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	f002 fca6 	bl	800379c <memset>
  if(huart->Instance==USART2)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a1c      	ldr	r2, [pc, #112]	; (8000ec8 <HAL_UART_MspInit+0x90>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d132      	bne.n	8000ec0 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e5a:	4b1c      	ldr	r3, [pc, #112]	; (8000ecc <HAL_UART_MspInit+0x94>)
 8000e5c:	69da      	ldr	r2, [r3, #28]
 8000e5e:	4b1b      	ldr	r3, [pc, #108]	; (8000ecc <HAL_UART_MspInit+0x94>)
 8000e60:	2180      	movs	r1, #128	; 0x80
 8000e62:	0289      	lsls	r1, r1, #10
 8000e64:	430a      	orrs	r2, r1
 8000e66:	61da      	str	r2, [r3, #28]
 8000e68:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <HAL_UART_MspInit+0x94>)
 8000e6a:	69da      	ldr	r2, [r3, #28]
 8000e6c:	2380      	movs	r3, #128	; 0x80
 8000e6e:	029b      	lsls	r3, r3, #10
 8000e70:	4013      	ands	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <HAL_UART_MspInit+0x94>)
 8000e78:	695a      	ldr	r2, [r3, #20]
 8000e7a:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <HAL_UART_MspInit+0x94>)
 8000e7c:	2180      	movs	r1, #128	; 0x80
 8000e7e:	0289      	lsls	r1, r1, #10
 8000e80:	430a      	orrs	r2, r1
 8000e82:	615a      	str	r2, [r3, #20]
 8000e84:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <HAL_UART_MspInit+0x94>)
 8000e86:	695a      	ldr	r2, [r3, #20]
 8000e88:	2380      	movs	r3, #128	; 0x80
 8000e8a:	029b      	lsls	r3, r3, #10
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8000e92:	2114      	movs	r1, #20
 8000e94:	187b      	adds	r3, r7, r1
 8000e96:	4a0e      	ldr	r2, [pc, #56]	; (8000ed0 <HAL_UART_MspInit+0x98>)
 8000e98:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	187b      	adds	r3, r7, r1
 8000e9c:	2202      	movs	r2, #2
 8000e9e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	187b      	adds	r3, r7, r1
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ea6:	187b      	adds	r3, r7, r1
 8000ea8:	2203      	movs	r2, #3
 8000eaa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000eac:	187b      	adds	r3, r7, r1
 8000eae:	2201      	movs	r2, #1
 8000eb0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb2:	187a      	adds	r2, r7, r1
 8000eb4:	2390      	movs	r3, #144	; 0x90
 8000eb6:	05db      	lsls	r3, r3, #23
 8000eb8:	0011      	movs	r1, r2
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f000 fe3c 	bl	8001b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ec0:	46c0      	nop			; (mov r8, r8)
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	b00a      	add	sp, #40	; 0x28
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40004400 	.word	0x40004400
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	00008004 	.word	0x00008004

08000ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ed8:	46c0      	nop			; (mov r8, r8)
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee2:	e7fe      	b.n	8000ee2 <HardFault_Handler+0x4>

08000ee4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ee8:	46c0      	nop			; (mov r8, r8)
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000efc:	f000 f892 	bl	8001024 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f00:	46c0      	nop			; (mov r8, r8)
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f10:	4813      	ldr	r0, [pc, #76]	; (8000f60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f12:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000f14:	4813      	ldr	r0, [pc, #76]	; (8000f64 <LoopForever+0x6>)
    LDR R1, [R0]
 8000f16:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000f18:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000f1a:	4a13      	ldr	r2, [pc, #76]	; (8000f68 <LoopForever+0xa>)
    CMP R1, R2
 8000f1c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000f1e:	d105      	bne.n	8000f2c <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000f20:	4812      	ldr	r0, [pc, #72]	; (8000f6c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000f22:	4913      	ldr	r1, [pc, #76]	; (8000f70 <LoopForever+0x12>)
    STR R1, [R0]
 8000f24:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000f26:	4813      	ldr	r0, [pc, #76]	; (8000f74 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000f28:	4913      	ldr	r1, [pc, #76]	; (8000f78 <LoopForever+0x1a>)
    STR R1, [R0]
 8000f2a:	6001      	str	r1, [r0, #0]

08000f2c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f2c:	4813      	ldr	r0, [pc, #76]	; (8000f7c <LoopForever+0x1e>)
  ldr r1, =_edata
 8000f2e:	4914      	ldr	r1, [pc, #80]	; (8000f80 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000f30:	4a14      	ldr	r2, [pc, #80]	; (8000f84 <LoopForever+0x26>)
  movs r3, #0
 8000f32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f34:	e002      	b.n	8000f3c <LoopCopyDataInit>

08000f36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f3a:	3304      	adds	r3, #4

08000f3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f40:	d3f9      	bcc.n	8000f36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f42:	4a11      	ldr	r2, [pc, #68]	; (8000f88 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000f44:	4c11      	ldr	r4, [pc, #68]	; (8000f8c <LoopForever+0x2e>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f48:	e001      	b.n	8000f4e <LoopFillZerobss>

08000f4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f4c:	3204      	adds	r2, #4

08000f4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f50:	d3fb      	bcc.n	8000f4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f52:	f7ff ffd8 	bl	8000f06 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000f56:	f002 fbfd 	bl	8003754 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f5a:	f7ff f961 	bl	8000220 <main>

08000f5e <LoopForever>:

LoopForever:
    b LoopForever
 8000f5e:	e7fe      	b.n	8000f5e <LoopForever>
  ldr   r0, =_estack
 8000f60:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000f64:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000f68:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000f6c:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000f70:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000f74:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000f78:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000f7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f80:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f84:	08003804 	.word	0x08003804
  ldr r2, =_sbss
 8000f88:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f8c:	20000194 	.word	0x20000194

08000f90 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f90:	e7fe      	b.n	8000f90 <ADC1_IRQHandler>
	...

08000f94 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f98:	4b07      	ldr	r3, [pc, #28]	; (8000fb8 <HAL_Init+0x24>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <HAL_Init+0x24>)
 8000f9e:	2110      	movs	r1, #16
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	f000 f809 	bl	8000fbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000faa:	f7ff fdc1 	bl	8000b30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fae:	2300      	movs	r3, #0
}
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	46c0      	nop			; (mov r8, r8)
 8000fb8:	40022000 	.word	0x40022000

08000fbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fbc:	b590      	push	{r4, r7, lr}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fc4:	4b14      	ldr	r3, [pc, #80]	; (8001018 <HAL_InitTick+0x5c>)
 8000fc6:	681c      	ldr	r4, [r3, #0]
 8000fc8:	4b14      	ldr	r3, [pc, #80]	; (800101c <HAL_InitTick+0x60>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	0019      	movs	r1, r3
 8000fce:	23fa      	movs	r3, #250	; 0xfa
 8000fd0:	0098      	lsls	r0, r3, #2
 8000fd2:	f7ff f899 	bl	8000108 <__udivsi3>
 8000fd6:	0003      	movs	r3, r0
 8000fd8:	0019      	movs	r1, r3
 8000fda:	0020      	movs	r0, r4
 8000fdc:	f7ff f894 	bl	8000108 <__udivsi3>
 8000fe0:	0003      	movs	r3, r0
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f000 fd9b 	bl	8001b1e <HAL_SYSTICK_Config>
 8000fe8:	1e03      	subs	r3, r0, #0
 8000fea:	d001      	beq.n	8000ff0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	e00f      	b.n	8001010 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b03      	cmp	r3, #3
 8000ff4:	d80b      	bhi.n	800100e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff6:	6879      	ldr	r1, [r7, #4]
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	425b      	negs	r3, r3
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	0018      	movs	r0, r3
 8001000:	f000 fd78 	bl	8001af4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <HAL_InitTick+0x64>)
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800100a:	2300      	movs	r3, #0
 800100c:	e000      	b.n	8001010 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
}
 8001010:	0018      	movs	r0, r3
 8001012:	46bd      	mov	sp, r7
 8001014:	b003      	add	sp, #12
 8001016:	bd90      	pop	{r4, r7, pc}
 8001018:	20000000 	.word	0x20000000
 800101c:	20000008 	.word	0x20000008
 8001020:	20000004 	.word	0x20000004

08001024 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <HAL_IncTick+0x1c>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	001a      	movs	r2, r3
 800102e:	4b05      	ldr	r3, [pc, #20]	; (8001044 <HAL_IncTick+0x20>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	18d2      	adds	r2, r2, r3
 8001034:	4b03      	ldr	r3, [pc, #12]	; (8001044 <HAL_IncTick+0x20>)
 8001036:	601a      	str	r2, [r3, #0]
}
 8001038:	46c0      	nop			; (mov r8, r8)
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	20000008 	.word	0x20000008
 8001044:	20000190 	.word	0x20000190

08001048 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  return uwTick;
 800104c:	4b02      	ldr	r3, [pc, #8]	; (8001058 <HAL_GetTick+0x10>)
 800104e:	681b      	ldr	r3, [r3, #0]
}
 8001050:	0018      	movs	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	20000190 	.word	0x20000190

0800105c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001064:	230f      	movs	r3, #15
 8001066:	18fb      	adds	r3, r7, r3
 8001068:	2200      	movs	r2, #0
 800106a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 800106c:	2300      	movs	r3, #0
 800106e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d101      	bne.n	800107a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e125      	b.n	80012c6 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800107e:	2b00      	cmp	r3, #0
 8001080:	d10a      	bne.n	8001098 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2200      	movs	r2, #0
 8001086:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2234      	movs	r2, #52	; 0x34
 800108c:	2100      	movs	r1, #0
 800108e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	0018      	movs	r0, r3
 8001094:	f7ff fd70 	bl	8000b78 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800109c:	2210      	movs	r2, #16
 800109e:	4013      	ands	r3, r2
 80010a0:	d000      	beq.n	80010a4 <HAL_ADC_Init+0x48>
 80010a2:	e103      	b.n	80012ac <HAL_ADC_Init+0x250>
 80010a4:	230f      	movs	r3, #15
 80010a6:	18fb      	adds	r3, r7, r3
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d000      	beq.n	80010b0 <HAL_ADC_Init+0x54>
 80010ae:	e0fd      	b.n	80012ac <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	2204      	movs	r2, #4
 80010b8:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80010ba:	d000      	beq.n	80010be <HAL_ADC_Init+0x62>
 80010bc:	e0f6      	b.n	80012ac <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010c2:	4a83      	ldr	r2, [pc, #524]	; (80012d0 <HAL_ADC_Init+0x274>)
 80010c4:	4013      	ands	r3, r2
 80010c6:	2202      	movs	r2, #2
 80010c8:	431a      	orrs	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	2203      	movs	r2, #3
 80010d6:	4013      	ands	r3, r2
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d112      	bne.n	8001102 <HAL_ADC_Init+0xa6>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2201      	movs	r2, #1
 80010e4:	4013      	ands	r3, r2
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d009      	beq.n	80010fe <HAL_ADC_Init+0xa2>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	68da      	ldr	r2, [r3, #12]
 80010f0:	2380      	movs	r3, #128	; 0x80
 80010f2:	021b      	lsls	r3, r3, #8
 80010f4:	401a      	ands	r2, r3
 80010f6:	2380      	movs	r3, #128	; 0x80
 80010f8:	021b      	lsls	r3, r3, #8
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d101      	bne.n	8001102 <HAL_ADC_Init+0xa6>
 80010fe:	2301      	movs	r3, #1
 8001100:	e000      	b.n	8001104 <HAL_ADC_Init+0xa8>
 8001102:	2300      	movs	r3, #0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d116      	bne.n	8001136 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	2218      	movs	r2, #24
 8001110:	4393      	bics	r3, r2
 8001112:	0019      	movs	r1, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	689a      	ldr	r2, [r3, #8]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	430a      	orrs	r2, r1
 800111e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	691b      	ldr	r3, [r3, #16]
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	0899      	lsrs	r1, r3, #2
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685a      	ldr	r2, [r3, #4]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	430a      	orrs	r2, r1
 8001134:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	68da      	ldr	r2, [r3, #12]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4964      	ldr	r1, [pc, #400]	; (80012d4 <HAL_ADC_Init+0x278>)
 8001142:	400a      	ands	r2, r1
 8001144:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	7e1b      	ldrb	r3, [r3, #24]
 800114a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	7e5b      	ldrb	r3, [r3, #25]
 8001150:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001152:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	7e9b      	ldrb	r3, [r3, #26]
 8001158:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800115a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001160:	2b01      	cmp	r3, #1
 8001162:	d002      	beq.n	800116a <HAL_ADC_Init+0x10e>
 8001164:	2380      	movs	r3, #128	; 0x80
 8001166:	015b      	lsls	r3, r3, #5
 8001168:	e000      	b.n	800116c <HAL_ADC_Init+0x110>
 800116a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800116c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001172:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	691b      	ldr	r3, [r3, #16]
 8001178:	2b02      	cmp	r3, #2
 800117a:	d101      	bne.n	8001180 <HAL_ADC_Init+0x124>
 800117c:	2304      	movs	r3, #4
 800117e:	e000      	b.n	8001182 <HAL_ADC_Init+0x126>
 8001180:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001182:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2124      	movs	r1, #36	; 0x24
 8001188:	5c5b      	ldrb	r3, [r3, r1]
 800118a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800118c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800118e:	68ba      	ldr	r2, [r7, #8]
 8001190:	4313      	orrs	r3, r2
 8001192:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	7edb      	ldrb	r3, [r3, #27]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d115      	bne.n	80011c8 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	7e9b      	ldrb	r3, [r3, #26]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d105      	bne.n	80011b0 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	2280      	movs	r2, #128	; 0x80
 80011a8:	0252      	lsls	r2, r2, #9
 80011aa:	4313      	orrs	r3, r2
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	e00b      	b.n	80011c8 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011b4:	2220      	movs	r2, #32
 80011b6:	431a      	orrs	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011c0:	2201      	movs	r2, #1
 80011c2:	431a      	orrs	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	69da      	ldr	r2, [r3, #28]
 80011cc:	23c2      	movs	r3, #194	; 0xc2
 80011ce:	33ff      	adds	r3, #255	; 0xff
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d007      	beq.n	80011e4 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80011dc:	4313      	orrs	r3, r2
 80011de:	68ba      	ldr	r2, [r7, #8]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	68d9      	ldr	r1, [r3, #12]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	430a      	orrs	r2, r1
 80011f2:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011f8:	2380      	movs	r3, #128	; 0x80
 80011fa:	055b      	lsls	r3, r3, #21
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d01b      	beq.n	8001238 <HAL_ADC_Init+0x1dc>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001204:	2b01      	cmp	r3, #1
 8001206:	d017      	beq.n	8001238 <HAL_ADC_Init+0x1dc>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800120c:	2b02      	cmp	r3, #2
 800120e:	d013      	beq.n	8001238 <HAL_ADC_Init+0x1dc>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001214:	2b03      	cmp	r3, #3
 8001216:	d00f      	beq.n	8001238 <HAL_ADC_Init+0x1dc>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800121c:	2b04      	cmp	r3, #4
 800121e:	d00b      	beq.n	8001238 <HAL_ADC_Init+0x1dc>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001224:	2b05      	cmp	r3, #5
 8001226:	d007      	beq.n	8001238 <HAL_ADC_Init+0x1dc>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800122c:	2b06      	cmp	r3, #6
 800122e:	d003      	beq.n	8001238 <HAL_ADC_Init+0x1dc>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001234:	2b07      	cmp	r3, #7
 8001236:	d112      	bne.n	800125e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	695a      	ldr	r2, [r3, #20]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2107      	movs	r1, #7
 8001244:	438a      	bics	r2, r1
 8001246:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	6959      	ldr	r1, [r3, #20]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001252:	2207      	movs	r2, #7
 8001254:	401a      	ands	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	430a      	orrs	r2, r1
 800125c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	4a1c      	ldr	r2, [pc, #112]	; (80012d8 <HAL_ADC_Init+0x27c>)
 8001266:	4013      	ands	r3, r2
 8001268:	68ba      	ldr	r2, [r7, #8]
 800126a:	429a      	cmp	r2, r3
 800126c:	d10b      	bne.n	8001286 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001278:	2203      	movs	r2, #3
 800127a:	4393      	bics	r3, r2
 800127c:	2201      	movs	r2, #1
 800127e:	431a      	orrs	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001284:	e01c      	b.n	80012c0 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800128a:	2212      	movs	r2, #18
 800128c:	4393      	bics	r3, r2
 800128e:	2210      	movs	r2, #16
 8001290:	431a      	orrs	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800129a:	2201      	movs	r2, #1
 800129c:	431a      	orrs	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80012a2:	230f      	movs	r3, #15
 80012a4:	18fb      	adds	r3, r7, r3
 80012a6:	2201      	movs	r2, #1
 80012a8:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80012aa:	e009      	b.n	80012c0 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012b0:	2210      	movs	r2, #16
 80012b2:	431a      	orrs	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80012b8:	230f      	movs	r3, #15
 80012ba:	18fb      	adds	r3, r7, r3
 80012bc:	2201      	movs	r2, #1
 80012be:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80012c0:	230f      	movs	r3, #15
 80012c2:	18fb      	adds	r3, r7, r3
 80012c4:	781b      	ldrb	r3, [r3, #0]
}
 80012c6:	0018      	movs	r0, r3
 80012c8:	46bd      	mov	sp, r7
 80012ca:	b004      	add	sp, #16
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	fffffefd 	.word	0xfffffefd
 80012d4:	fffe0219 	.word	0xfffe0219
 80012d8:	833fffe7 	.word	0x833fffe7

080012dc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80012dc:	b590      	push	{r4, r7, lr}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012e4:	230f      	movs	r3, #15
 80012e6:	18fb      	adds	r3, r7, r3
 80012e8:	2200      	movs	r2, #0
 80012ea:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	2204      	movs	r2, #4
 80012f4:	4013      	ands	r3, r2
 80012f6:	d138      	bne.n	800136a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2234      	movs	r2, #52	; 0x34
 80012fc:	5c9b      	ldrb	r3, [r3, r2]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d101      	bne.n	8001306 <HAL_ADC_Start+0x2a>
 8001302:	2302      	movs	r3, #2
 8001304:	e038      	b.n	8001378 <HAL_ADC_Start+0x9c>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2234      	movs	r2, #52	; 0x34
 800130a:	2101      	movs	r1, #1
 800130c:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	7e5b      	ldrb	r3, [r3, #25]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d007      	beq.n	8001326 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001316:	230f      	movs	r3, #15
 8001318:	18fc      	adds	r4, r7, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	0018      	movs	r0, r3
 800131e:	f000 f9dd 	bl	80016dc <ADC_Enable>
 8001322:	0003      	movs	r3, r0
 8001324:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001326:	230f      	movs	r3, #15
 8001328:	18fb      	adds	r3, r7, r3
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d120      	bne.n	8001372 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001334:	4a12      	ldr	r2, [pc, #72]	; (8001380 <HAL_ADC_Start+0xa4>)
 8001336:	4013      	ands	r3, r2
 8001338:	2280      	movs	r2, #128	; 0x80
 800133a:	0052      	lsls	r2, r2, #1
 800133c:	431a      	orrs	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2234      	movs	r2, #52	; 0x34
 800134c:	2100      	movs	r1, #0
 800134e:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	221c      	movs	r2, #28
 8001356:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	689a      	ldr	r2, [r3, #8]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2104      	movs	r1, #4
 8001364:	430a      	orrs	r2, r1
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	e003      	b.n	8001372 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800136a:	230f      	movs	r3, #15
 800136c:	18fb      	adds	r3, r7, r3
 800136e:	2202      	movs	r2, #2
 8001370:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001372:	230f      	movs	r3, #15
 8001374:	18fb      	adds	r3, r7, r3
 8001376:	781b      	ldrb	r3, [r3, #0]
}
 8001378:	0018      	movs	r0, r3
 800137a:	46bd      	mov	sp, r7
 800137c:	b005      	add	sp, #20
 800137e:	bd90      	pop	{r4, r7, pc}
 8001380:	fffff0fe 	.word	0xfffff0fe

08001384 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	695b      	ldr	r3, [r3, #20]
 8001392:	2b08      	cmp	r3, #8
 8001394:	d102      	bne.n	800139c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001396:	2308      	movs	r3, #8
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	e014      	b.n	80013c6 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	2201      	movs	r2, #1
 80013a4:	4013      	ands	r3, r2
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d10b      	bne.n	80013c2 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013ae:	2220      	movs	r2, #32
 80013b0:	431a      	orrs	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2234      	movs	r2, #52	; 0x34
 80013ba:	2100      	movs	r1, #0
 80013bc:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e06b      	b.n	800149a <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80013c2:	230c      	movs	r3, #12
 80013c4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80013c6:	f7ff fe3f 	bl	8001048 <HAL_GetTick>
 80013ca:	0003      	movs	r3, r0
 80013cc:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80013ce:	e019      	b.n	8001404 <HAL_ADC_PollForConversion+0x80>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	3301      	adds	r3, #1
 80013d4:	d016      	beq.n	8001404 <HAL_ADC_PollForConversion+0x80>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d007      	beq.n	80013ec <HAL_ADC_PollForConversion+0x68>
 80013dc:	f7ff fe34 	bl	8001048 <HAL_GetTick>
 80013e0:	0002      	movs	r2, r0
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	683a      	ldr	r2, [r7, #0]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d20b      	bcs.n	8001404 <HAL_ADC_PollForConversion+0x80>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013f0:	2204      	movs	r2, #4
 80013f2:	431a      	orrs	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2234      	movs	r2, #52	; 0x34
 80013fc:	2100      	movs	r1, #0
 80013fe:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e04a      	b.n	800149a <HAL_ADC_PollForConversion+0x116>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	68fa      	ldr	r2, [r7, #12]
 800140c:	4013      	ands	r3, r2
 800140e:	d0df      	beq.n	80013d0 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001414:	2280      	movs	r2, #128	; 0x80
 8001416:	0092      	lsls	r2, r2, #2
 8001418:	431a      	orrs	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	68da      	ldr	r2, [r3, #12]
 8001424:	23c0      	movs	r3, #192	; 0xc0
 8001426:	011b      	lsls	r3, r3, #4
 8001428:	4013      	ands	r3, r2
 800142a:	d12d      	bne.n	8001488 <HAL_ADC_PollForConversion+0x104>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001430:	2b00      	cmp	r3, #0
 8001432:	d129      	bne.n	8001488 <HAL_ADC_PollForConversion+0x104>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2208      	movs	r2, #8
 800143c:	4013      	ands	r3, r2
 800143e:	2b08      	cmp	r3, #8
 8001440:	d122      	bne.n	8001488 <HAL_ADC_PollForConversion+0x104>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	2204      	movs	r2, #4
 800144a:	4013      	ands	r3, r2
 800144c:	d110      	bne.n	8001470 <HAL_ADC_PollForConversion+0xec>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	685a      	ldr	r2, [r3, #4]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	210c      	movs	r1, #12
 800145a:	438a      	bics	r2, r1
 800145c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001462:	4a10      	ldr	r2, [pc, #64]	; (80014a4 <HAL_ADC_PollForConversion+0x120>)
 8001464:	4013      	ands	r3, r2
 8001466:	2201      	movs	r2, #1
 8001468:	431a      	orrs	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	639a      	str	r2, [r3, #56]	; 0x38
 800146e:	e00b      	b.n	8001488 <HAL_ADC_PollForConversion+0x104>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001474:	2220      	movs	r2, #32
 8001476:	431a      	orrs	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001480:	2201      	movs	r2, #1
 8001482:	431a      	orrs	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	7e1b      	ldrb	r3, [r3, #24]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d103      	bne.n	8001498 <HAL_ADC_PollForConversion+0x114>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	220c      	movs	r2, #12
 8001496:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	0018      	movs	r0, r3
 800149c:	46bd      	mov	sp, r7
 800149e:	b004      	add	sp, #16
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	fffffefe 	.word	0xfffffefe

080014a8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80014b6:	0018      	movs	r0, r3
 80014b8:	46bd      	mov	sp, r7
 80014ba:	b002      	add	sp, #8
 80014bc:	bd80      	pop	{r7, pc}
	...

080014c0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014ca:	230f      	movs	r3, #15
 80014cc:	18fb      	adds	r3, r7, r3
 80014ce:	2200      	movs	r2, #0
 80014d0:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80014d2:	2300      	movs	r3, #0
 80014d4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014da:	2380      	movs	r3, #128	; 0x80
 80014dc:	055b      	lsls	r3, r3, #21
 80014de:	429a      	cmp	r2, r3
 80014e0:	d011      	beq.n	8001506 <HAL_ADC_ConfigChannel+0x46>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d00d      	beq.n	8001506 <HAL_ADC_ConfigChannel+0x46>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d009      	beq.n	8001506 <HAL_ADC_ConfigChannel+0x46>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f6:	2b03      	cmp	r3, #3
 80014f8:	d005      	beq.n	8001506 <HAL_ADC_ConfigChannel+0x46>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fe:	2b04      	cmp	r3, #4
 8001500:	d001      	beq.n	8001506 <HAL_ADC_ConfigChannel+0x46>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2234      	movs	r2, #52	; 0x34
 800150a:	5c9b      	ldrb	r3, [r3, r2]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d101      	bne.n	8001514 <HAL_ADC_ConfigChannel+0x54>
 8001510:	2302      	movs	r3, #2
 8001512:	e0d0      	b.n	80016b6 <HAL_ADC_ConfigChannel+0x1f6>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2234      	movs	r2, #52	; 0x34
 8001518:	2101      	movs	r1, #1
 800151a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	2204      	movs	r2, #4
 8001524:	4013      	ands	r3, r2
 8001526:	d000      	beq.n	800152a <HAL_ADC_ConfigChannel+0x6a>
 8001528:	e0b4      	b.n	8001694 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	4a64      	ldr	r2, [pc, #400]	; (80016c0 <HAL_ADC_ConfigChannel+0x200>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d100      	bne.n	8001536 <HAL_ADC_ConfigChannel+0x76>
 8001534:	e082      	b.n	800163c <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2201      	movs	r2, #1
 8001542:	409a      	lsls	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	430a      	orrs	r2, r1
 800154a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001550:	2380      	movs	r3, #128	; 0x80
 8001552:	055b      	lsls	r3, r3, #21
 8001554:	429a      	cmp	r2, r3
 8001556:	d037      	beq.n	80015c8 <HAL_ADC_ConfigChannel+0x108>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155c:	2b01      	cmp	r3, #1
 800155e:	d033      	beq.n	80015c8 <HAL_ADC_ConfigChannel+0x108>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001564:	2b02      	cmp	r3, #2
 8001566:	d02f      	beq.n	80015c8 <HAL_ADC_ConfigChannel+0x108>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156c:	2b03      	cmp	r3, #3
 800156e:	d02b      	beq.n	80015c8 <HAL_ADC_ConfigChannel+0x108>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001574:	2b04      	cmp	r3, #4
 8001576:	d027      	beq.n	80015c8 <HAL_ADC_ConfigChannel+0x108>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800157c:	2b05      	cmp	r3, #5
 800157e:	d023      	beq.n	80015c8 <HAL_ADC_ConfigChannel+0x108>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001584:	2b06      	cmp	r3, #6
 8001586:	d01f      	beq.n	80015c8 <HAL_ADC_ConfigChannel+0x108>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158c:	2b07      	cmp	r3, #7
 800158e:	d01b      	beq.n	80015c8 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	689a      	ldr	r2, [r3, #8]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	695b      	ldr	r3, [r3, #20]
 800159a:	2107      	movs	r1, #7
 800159c:	400b      	ands	r3, r1
 800159e:	429a      	cmp	r2, r3
 80015a0:	d012      	beq.n	80015c8 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	695a      	ldr	r2, [r3, #20]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2107      	movs	r1, #7
 80015ae:	438a      	bics	r2, r1
 80015b0:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	6959      	ldr	r1, [r3, #20]
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	2207      	movs	r2, #7
 80015be:	401a      	ands	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	430a      	orrs	r2, r1
 80015c6:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b10      	cmp	r3, #16
 80015ce:	d007      	beq.n	80015e0 <HAL_ADC_ConfigChannel+0x120>
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b11      	cmp	r3, #17
 80015d6:	d003      	beq.n	80015e0 <HAL_ADC_ConfigChannel+0x120>
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b12      	cmp	r3, #18
 80015de:	d163      	bne.n	80016a8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80015e0:	4b38      	ldr	r3, [pc, #224]	; (80016c4 <HAL_ADC_ConfigChannel+0x204>)
 80015e2:	6819      	ldr	r1, [r3, #0]
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b10      	cmp	r3, #16
 80015ea:	d009      	beq.n	8001600 <HAL_ADC_ConfigChannel+0x140>
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2b11      	cmp	r3, #17
 80015f2:	d102      	bne.n	80015fa <HAL_ADC_ConfigChannel+0x13a>
 80015f4:	2380      	movs	r3, #128	; 0x80
 80015f6:	03db      	lsls	r3, r3, #15
 80015f8:	e004      	b.n	8001604 <HAL_ADC_ConfigChannel+0x144>
 80015fa:	2380      	movs	r3, #128	; 0x80
 80015fc:	045b      	lsls	r3, r3, #17
 80015fe:	e001      	b.n	8001604 <HAL_ADC_ConfigChannel+0x144>
 8001600:	2380      	movs	r3, #128	; 0x80
 8001602:	041b      	lsls	r3, r3, #16
 8001604:	4a2f      	ldr	r2, [pc, #188]	; (80016c4 <HAL_ADC_ConfigChannel+0x204>)
 8001606:	430b      	orrs	r3, r1
 8001608:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2b10      	cmp	r3, #16
 8001610:	d14a      	bne.n	80016a8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001612:	4b2d      	ldr	r3, [pc, #180]	; (80016c8 <HAL_ADC_ConfigChannel+0x208>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	492d      	ldr	r1, [pc, #180]	; (80016cc <HAL_ADC_ConfigChannel+0x20c>)
 8001618:	0018      	movs	r0, r3
 800161a:	f7fe fd75 	bl	8000108 <__udivsi3>
 800161e:	0003      	movs	r3, r0
 8001620:	001a      	movs	r2, r3
 8001622:	0013      	movs	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	189b      	adds	r3, r3, r2
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800162c:	e002      	b.n	8001634 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	3b01      	subs	r3, #1
 8001632:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1f9      	bne.n	800162e <HAL_ADC_ConfigChannel+0x16e>
 800163a:	e035      	b.n	80016a8 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2101      	movs	r1, #1
 8001648:	4099      	lsls	r1, r3
 800164a:	000b      	movs	r3, r1
 800164c:	43d9      	mvns	r1, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	400a      	ands	r2, r1
 8001654:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2b10      	cmp	r3, #16
 800165c:	d007      	beq.n	800166e <HAL_ADC_ConfigChannel+0x1ae>
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2b11      	cmp	r3, #17
 8001664:	d003      	beq.n	800166e <HAL_ADC_ConfigChannel+0x1ae>
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2b12      	cmp	r3, #18
 800166c:	d11c      	bne.n	80016a8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800166e:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <HAL_ADC_ConfigChannel+0x204>)
 8001670:	6819      	ldr	r1, [r3, #0]
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2b10      	cmp	r3, #16
 8001678:	d007      	beq.n	800168a <HAL_ADC_ConfigChannel+0x1ca>
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2b11      	cmp	r3, #17
 8001680:	d101      	bne.n	8001686 <HAL_ADC_ConfigChannel+0x1c6>
 8001682:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <HAL_ADC_ConfigChannel+0x210>)
 8001684:	e002      	b.n	800168c <HAL_ADC_ConfigChannel+0x1cc>
 8001686:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <HAL_ADC_ConfigChannel+0x214>)
 8001688:	e000      	b.n	800168c <HAL_ADC_ConfigChannel+0x1cc>
 800168a:	4b13      	ldr	r3, [pc, #76]	; (80016d8 <HAL_ADC_ConfigChannel+0x218>)
 800168c:	4a0d      	ldr	r2, [pc, #52]	; (80016c4 <HAL_ADC_ConfigChannel+0x204>)
 800168e:	400b      	ands	r3, r1
 8001690:	6013      	str	r3, [r2, #0]
 8001692:	e009      	b.n	80016a8 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001698:	2220      	movs	r2, #32
 800169a:	431a      	orrs	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80016a0:	230f      	movs	r3, #15
 80016a2:	18fb      	adds	r3, r7, r3
 80016a4:	2201      	movs	r2, #1
 80016a6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2234      	movs	r2, #52	; 0x34
 80016ac:	2100      	movs	r1, #0
 80016ae:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80016b0:	230f      	movs	r3, #15
 80016b2:	18fb      	adds	r3, r7, r3
 80016b4:	781b      	ldrb	r3, [r3, #0]
}
 80016b6:	0018      	movs	r0, r3
 80016b8:	46bd      	mov	sp, r7
 80016ba:	b004      	add	sp, #16
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	46c0      	nop			; (mov r8, r8)
 80016c0:	00001001 	.word	0x00001001
 80016c4:	40012708 	.word	0x40012708
 80016c8:	20000000 	.word	0x20000000
 80016cc:	000f4240 	.word	0x000f4240
 80016d0:	ffbfffff 	.word	0xffbfffff
 80016d4:	feffffff 	.word	0xfeffffff
 80016d8:	ff7fffff 	.word	0xff7fffff

080016dc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016e4:	2300      	movs	r3, #0
 80016e6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80016e8:	2300      	movs	r3, #0
 80016ea:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	2203      	movs	r2, #3
 80016f4:	4013      	ands	r3, r2
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d112      	bne.n	8001720 <ADC_Enable+0x44>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2201      	movs	r2, #1
 8001702:	4013      	ands	r3, r2
 8001704:	2b01      	cmp	r3, #1
 8001706:	d009      	beq.n	800171c <ADC_Enable+0x40>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	68da      	ldr	r2, [r3, #12]
 800170e:	2380      	movs	r3, #128	; 0x80
 8001710:	021b      	lsls	r3, r3, #8
 8001712:	401a      	ands	r2, r3
 8001714:	2380      	movs	r3, #128	; 0x80
 8001716:	021b      	lsls	r3, r3, #8
 8001718:	429a      	cmp	r2, r3
 800171a:	d101      	bne.n	8001720 <ADC_Enable+0x44>
 800171c:	2301      	movs	r3, #1
 800171e:	e000      	b.n	8001722 <ADC_Enable+0x46>
 8001720:	2300      	movs	r3, #0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d14b      	bne.n	80017be <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	4a26      	ldr	r2, [pc, #152]	; (80017c8 <ADC_Enable+0xec>)
 800172e:	4013      	ands	r3, r2
 8001730:	d00d      	beq.n	800174e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001736:	2210      	movs	r2, #16
 8001738:	431a      	orrs	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001742:	2201      	movs	r2, #1
 8001744:	431a      	orrs	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e038      	b.n	80017c0 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2101      	movs	r1, #1
 800175a:	430a      	orrs	r2, r1
 800175c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800175e:	4b1b      	ldr	r3, [pc, #108]	; (80017cc <ADC_Enable+0xf0>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	491b      	ldr	r1, [pc, #108]	; (80017d0 <ADC_Enable+0xf4>)
 8001764:	0018      	movs	r0, r3
 8001766:	f7fe fccf 	bl	8000108 <__udivsi3>
 800176a:	0003      	movs	r3, r0
 800176c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800176e:	e002      	b.n	8001776 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	3b01      	subs	r3, #1
 8001774:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d1f9      	bne.n	8001770 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 800177c:	f7ff fc64 	bl	8001048 <HAL_GetTick>
 8001780:	0003      	movs	r3, r0
 8001782:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001784:	e014      	b.n	80017b0 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001786:	f7ff fc5f 	bl	8001048 <HAL_GetTick>
 800178a:	0002      	movs	r2, r0
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d90d      	bls.n	80017b0 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001798:	2210      	movs	r2, #16
 800179a:	431a      	orrs	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017a4:	2201      	movs	r2, #1
 80017a6:	431a      	orrs	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e007      	b.n	80017c0 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2201      	movs	r2, #1
 80017b8:	4013      	ands	r3, r2
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d1e3      	bne.n	8001786 <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	0018      	movs	r0, r3
 80017c2:	46bd      	mov	sp, r7
 80017c4:	b004      	add	sp, #16
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	80000017 	.word	0x80000017
 80017cc:	20000000 	.word	0x20000000
 80017d0:	000f4240 	.word	0x000f4240

080017d4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d101      	bne.n	80017e6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e0f0      	b.n	80019c8 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2220      	movs	r2, #32
 80017ea:	5c9b      	ldrb	r3, [r3, r2]
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d103      	bne.n	80017fa <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	0018      	movs	r0, r3
 80017f6:	f7ff fa25 	bl	8000c44 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2102      	movs	r1, #2
 8001806:	438a      	bics	r2, r1
 8001808:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800180a:	f7ff fc1d 	bl	8001048 <HAL_GetTick>
 800180e:	0003      	movs	r3, r0
 8001810:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001812:	e013      	b.n	800183c <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001814:	f7ff fc18 	bl	8001048 <HAL_GetTick>
 8001818:	0002      	movs	r2, r0
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b0a      	cmp	r3, #10
 8001820:	d90c      	bls.n	800183c <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001826:	2280      	movs	r2, #128	; 0x80
 8001828:	0292      	lsls	r2, r2, #10
 800182a:	431a      	orrs	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2220      	movs	r2, #32
 8001834:	2105      	movs	r1, #5
 8001836:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e0c5      	b.n	80019c8 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2202      	movs	r2, #2
 8001844:	4013      	ands	r3, r2
 8001846:	d1e5      	bne.n	8001814 <HAL_CAN_Init+0x40>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2101      	movs	r1, #1
 8001854:	430a      	orrs	r2, r1
 8001856:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001858:	f7ff fbf6 	bl	8001048 <HAL_GetTick>
 800185c:	0003      	movs	r3, r0
 800185e:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001860:	e013      	b.n	800188a <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001862:	f7ff fbf1 	bl	8001048 <HAL_GetTick>
 8001866:	0002      	movs	r2, r0
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b0a      	cmp	r3, #10
 800186e:	d90c      	bls.n	800188a <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001874:	2280      	movs	r2, #128	; 0x80
 8001876:	0292      	lsls	r2, r2, #10
 8001878:	431a      	orrs	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2220      	movs	r2, #32
 8001882:	2105      	movs	r1, #5
 8001884:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e09e      	b.n	80019c8 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	2201      	movs	r2, #1
 8001892:	4013      	ands	r3, r2
 8001894:	d0e5      	beq.n	8001862 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	7e1b      	ldrb	r3, [r3, #24]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d108      	bne.n	80018b0 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2180      	movs	r1, #128	; 0x80
 80018aa:	430a      	orrs	r2, r1
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	e007      	b.n	80018c0 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2180      	movs	r1, #128	; 0x80
 80018bc:	438a      	bics	r2, r1
 80018be:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	7e5b      	ldrb	r3, [r3, #25]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d108      	bne.n	80018da <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2140      	movs	r1, #64	; 0x40
 80018d4:	430a      	orrs	r2, r1
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	e007      	b.n	80018ea <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2140      	movs	r1, #64	; 0x40
 80018e6:	438a      	bics	r2, r1
 80018e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	7e9b      	ldrb	r3, [r3, #26]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d108      	bne.n	8001904 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2120      	movs	r1, #32
 80018fe:	430a      	orrs	r2, r1
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	e007      	b.n	8001914 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2120      	movs	r1, #32
 8001910:	438a      	bics	r2, r1
 8001912:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	7edb      	ldrb	r3, [r3, #27]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d108      	bne.n	800192e <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2110      	movs	r1, #16
 8001928:	438a      	bics	r2, r1
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	e007      	b.n	800193e <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2110      	movs	r1, #16
 800193a:	430a      	orrs	r2, r1
 800193c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	7f1b      	ldrb	r3, [r3, #28]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d108      	bne.n	8001958 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2108      	movs	r1, #8
 8001952:	430a      	orrs	r2, r1
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	e007      	b.n	8001968 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2108      	movs	r1, #8
 8001964:	438a      	bics	r2, r1
 8001966:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	7f5b      	ldrb	r3, [r3, #29]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d108      	bne.n	8001982 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2104      	movs	r1, #4
 800197c:	430a      	orrs	r2, r1
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	e007      	b.n	8001992 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2104      	movs	r1, #4
 800198e:	438a      	bics	r2, r1
 8001990:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	689a      	ldr	r2, [r3, #8]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	431a      	orrs	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	691b      	ldr	r3, [r3, #16]
 80019a0:	431a      	orrs	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	431a      	orrs	r2, r3
 80019a8:	0011      	movs	r1, r2
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	1e5a      	subs	r2, r3, #1
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	430a      	orrs	r2, r1
 80019b6:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2220      	movs	r2, #32
 80019c2:	2101      	movs	r1, #1
 80019c4:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	0018      	movs	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	b004      	add	sp, #16
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019d0:	b590      	push	{r4, r7, lr}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	0002      	movs	r2, r0
 80019d8:	6039      	str	r1, [r7, #0]
 80019da:	1dfb      	adds	r3, r7, #7
 80019dc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80019de:	1dfb      	adds	r3, r7, #7
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b7f      	cmp	r3, #127	; 0x7f
 80019e4:	d828      	bhi.n	8001a38 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019e6:	4a2f      	ldr	r2, [pc, #188]	; (8001aa4 <__NVIC_SetPriority+0xd4>)
 80019e8:	1dfb      	adds	r3, r7, #7
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	b25b      	sxtb	r3, r3
 80019ee:	089b      	lsrs	r3, r3, #2
 80019f0:	33c0      	adds	r3, #192	; 0xc0
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	589b      	ldr	r3, [r3, r2]
 80019f6:	1dfa      	adds	r2, r7, #7
 80019f8:	7812      	ldrb	r2, [r2, #0]
 80019fa:	0011      	movs	r1, r2
 80019fc:	2203      	movs	r2, #3
 80019fe:	400a      	ands	r2, r1
 8001a00:	00d2      	lsls	r2, r2, #3
 8001a02:	21ff      	movs	r1, #255	; 0xff
 8001a04:	4091      	lsls	r1, r2
 8001a06:	000a      	movs	r2, r1
 8001a08:	43d2      	mvns	r2, r2
 8001a0a:	401a      	ands	r2, r3
 8001a0c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	019b      	lsls	r3, r3, #6
 8001a12:	22ff      	movs	r2, #255	; 0xff
 8001a14:	401a      	ands	r2, r3
 8001a16:	1dfb      	adds	r3, r7, #7
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	4003      	ands	r3, r0
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a24:	481f      	ldr	r0, [pc, #124]	; (8001aa4 <__NVIC_SetPriority+0xd4>)
 8001a26:	1dfb      	adds	r3, r7, #7
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	b25b      	sxtb	r3, r3
 8001a2c:	089b      	lsrs	r3, r3, #2
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	33c0      	adds	r3, #192	; 0xc0
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001a36:	e031      	b.n	8001a9c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a38:	4a1b      	ldr	r2, [pc, #108]	; (8001aa8 <__NVIC_SetPriority+0xd8>)
 8001a3a:	1dfb      	adds	r3, r7, #7
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	0019      	movs	r1, r3
 8001a40:	230f      	movs	r3, #15
 8001a42:	400b      	ands	r3, r1
 8001a44:	3b08      	subs	r3, #8
 8001a46:	089b      	lsrs	r3, r3, #2
 8001a48:	3306      	adds	r3, #6
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	18d3      	adds	r3, r2, r3
 8001a4e:	3304      	adds	r3, #4
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	1dfa      	adds	r2, r7, #7
 8001a54:	7812      	ldrb	r2, [r2, #0]
 8001a56:	0011      	movs	r1, r2
 8001a58:	2203      	movs	r2, #3
 8001a5a:	400a      	ands	r2, r1
 8001a5c:	00d2      	lsls	r2, r2, #3
 8001a5e:	21ff      	movs	r1, #255	; 0xff
 8001a60:	4091      	lsls	r1, r2
 8001a62:	000a      	movs	r2, r1
 8001a64:	43d2      	mvns	r2, r2
 8001a66:	401a      	ands	r2, r3
 8001a68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	019b      	lsls	r3, r3, #6
 8001a6e:	22ff      	movs	r2, #255	; 0xff
 8001a70:	401a      	ands	r2, r3
 8001a72:	1dfb      	adds	r3, r7, #7
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	0018      	movs	r0, r3
 8001a78:	2303      	movs	r3, #3
 8001a7a:	4003      	ands	r3, r0
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a80:	4809      	ldr	r0, [pc, #36]	; (8001aa8 <__NVIC_SetPriority+0xd8>)
 8001a82:	1dfb      	adds	r3, r7, #7
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	001c      	movs	r4, r3
 8001a88:	230f      	movs	r3, #15
 8001a8a:	4023      	ands	r3, r4
 8001a8c:	3b08      	subs	r3, #8
 8001a8e:	089b      	lsrs	r3, r3, #2
 8001a90:	430a      	orrs	r2, r1
 8001a92:	3306      	adds	r3, #6
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	18c3      	adds	r3, r0, r3
 8001a98:	3304      	adds	r3, #4
 8001a9a:	601a      	str	r2, [r3, #0]
}
 8001a9c:	46c0      	nop			; (mov r8, r8)
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	b003      	add	sp, #12
 8001aa2:	bd90      	pop	{r4, r7, pc}
 8001aa4:	e000e100 	.word	0xe000e100
 8001aa8:	e000ed00 	.word	0xe000ed00

08001aac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	4a0c      	ldr	r2, [pc, #48]	; (8001aec <SysTick_Config+0x40>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d901      	bls.n	8001ac2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e010      	b.n	8001ae4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ac2:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <SysTick_Config+0x44>)
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	3a01      	subs	r2, #1
 8001ac8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aca:	2301      	movs	r3, #1
 8001acc:	425b      	negs	r3, r3
 8001ace:	2103      	movs	r1, #3
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	f7ff ff7d 	bl	80019d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ad6:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <SysTick_Config+0x44>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001adc:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <SysTick_Config+0x44>)
 8001ade:	2207      	movs	r2, #7
 8001ae0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	b002      	add	sp, #8
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	00ffffff 	.word	0x00ffffff
 8001af0:	e000e010 	.word	0xe000e010

08001af4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	607a      	str	r2, [r7, #4]
 8001afe:	210f      	movs	r1, #15
 8001b00:	187b      	adds	r3, r7, r1
 8001b02:	1c02      	adds	r2, r0, #0
 8001b04:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001b06:	68ba      	ldr	r2, [r7, #8]
 8001b08:	187b      	adds	r3, r7, r1
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	b25b      	sxtb	r3, r3
 8001b0e:	0011      	movs	r1, r2
 8001b10:	0018      	movs	r0, r3
 8001b12:	f7ff ff5d 	bl	80019d0 <__NVIC_SetPriority>
}
 8001b16:	46c0      	nop			; (mov r8, r8)
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	b004      	add	sp, #16
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	0018      	movs	r0, r3
 8001b2a:	f7ff ffbf 	bl	8001aac <SysTick_Config>
 8001b2e:	0003      	movs	r3, r0
}
 8001b30:	0018      	movs	r0, r3
 8001b32:	46bd      	mov	sp, r7
 8001b34:	b002      	add	sp, #8
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b42:	2300      	movs	r3, #0
 8001b44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b46:	e149      	b.n	8001ddc <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	697a      	ldr	r2, [r7, #20]
 8001b50:	4091      	lsls	r1, r2
 8001b52:	000a      	movs	r2, r1
 8001b54:	4013      	ands	r3, r2
 8001b56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d100      	bne.n	8001b60 <HAL_GPIO_Init+0x28>
 8001b5e:	e13a      	b.n	8001dd6 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d003      	beq.n	8001b70 <HAL_GPIO_Init+0x38>
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	2b12      	cmp	r3, #18
 8001b6e:	d123      	bne.n	8001bb8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	08da      	lsrs	r2, r3, #3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3208      	adds	r2, #8
 8001b78:	0092      	lsls	r2, r2, #2
 8001b7a:	58d3      	ldr	r3, [r2, r3]
 8001b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	2207      	movs	r2, #7
 8001b82:	4013      	ands	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	220f      	movs	r2, #15
 8001b88:	409a      	lsls	r2, r3
 8001b8a:	0013      	movs	r3, r2
 8001b8c:	43da      	mvns	r2, r3
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	4013      	ands	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	691a      	ldr	r2, [r3, #16]
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	2107      	movs	r1, #7
 8001b9c:	400b      	ands	r3, r1
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	409a      	lsls	r2, r3
 8001ba2:	0013      	movs	r3, r2
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	08da      	lsrs	r2, r3, #3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	3208      	adds	r2, #8
 8001bb2:	0092      	lsls	r2, r2, #2
 8001bb4:	6939      	ldr	r1, [r7, #16]
 8001bb6:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	2203      	movs	r2, #3
 8001bc4:	409a      	lsls	r2, r3
 8001bc6:	0013      	movs	r3, r2
 8001bc8:	43da      	mvns	r2, r3
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	2203      	movs	r2, #3
 8001bd6:	401a      	ands	r2, r3
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	409a      	lsls	r2, r3
 8001bde:	0013      	movs	r3, r2
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d00b      	beq.n	8001c0c <HAL_GPIO_Init+0xd4>
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d007      	beq.n	8001c0c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c00:	2b11      	cmp	r3, #17
 8001c02:	d003      	beq.n	8001c0c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	2b12      	cmp	r3, #18
 8001c0a:	d130      	bne.n	8001c6e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	2203      	movs	r2, #3
 8001c18:	409a      	lsls	r2, r3
 8001c1a:	0013      	movs	r3, r2
 8001c1c:	43da      	mvns	r2, r3
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	4013      	ands	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	68da      	ldr	r2, [r3, #12]
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	409a      	lsls	r2, r3
 8001c2e:	0013      	movs	r3, r2
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c42:	2201      	movs	r2, #1
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	409a      	lsls	r2, r3
 8001c48:	0013      	movs	r3, r2
 8001c4a:	43da      	mvns	r2, r3
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	091b      	lsrs	r3, r3, #4
 8001c58:	2201      	movs	r2, #1
 8001c5a:	401a      	ands	r2, r3
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	409a      	lsls	r2, r3
 8001c60:	0013      	movs	r3, r2
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	2203      	movs	r2, #3
 8001c7a:	409a      	lsls	r2, r3
 8001c7c:	0013      	movs	r3, r2
 8001c7e:	43da      	mvns	r2, r3
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	4013      	ands	r3, r2
 8001c84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	689a      	ldr	r2, [r3, #8]
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	409a      	lsls	r2, r3
 8001c90:	0013      	movs	r3, r2
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685a      	ldr	r2, [r3, #4]
 8001ca2:	2380      	movs	r3, #128	; 0x80
 8001ca4:	055b      	lsls	r3, r3, #21
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	d100      	bne.n	8001cac <HAL_GPIO_Init+0x174>
 8001caa:	e094      	b.n	8001dd6 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cac:	4b51      	ldr	r3, [pc, #324]	; (8001df4 <HAL_GPIO_Init+0x2bc>)
 8001cae:	699a      	ldr	r2, [r3, #24]
 8001cb0:	4b50      	ldr	r3, [pc, #320]	; (8001df4 <HAL_GPIO_Init+0x2bc>)
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	619a      	str	r2, [r3, #24]
 8001cb8:	4b4e      	ldr	r3, [pc, #312]	; (8001df4 <HAL_GPIO_Init+0x2bc>)
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	60bb      	str	r3, [r7, #8]
 8001cc2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cc4:	4a4c      	ldr	r2, [pc, #304]	; (8001df8 <HAL_GPIO_Init+0x2c0>)
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	089b      	lsrs	r3, r3, #2
 8001cca:	3302      	adds	r3, #2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	589b      	ldr	r3, [r3, r2]
 8001cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	2203      	movs	r2, #3
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	220f      	movs	r2, #15
 8001cdc:	409a      	lsls	r2, r3
 8001cde:	0013      	movs	r3, r2
 8001ce0:	43da      	mvns	r2, r3
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	2390      	movs	r3, #144	; 0x90
 8001cec:	05db      	lsls	r3, r3, #23
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d00d      	beq.n	8001d0e <HAL_GPIO_Init+0x1d6>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a41      	ldr	r2, [pc, #260]	; (8001dfc <HAL_GPIO_Init+0x2c4>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d007      	beq.n	8001d0a <HAL_GPIO_Init+0x1d2>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a40      	ldr	r2, [pc, #256]	; (8001e00 <HAL_GPIO_Init+0x2c8>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d101      	bne.n	8001d06 <HAL_GPIO_Init+0x1ce>
 8001d02:	2302      	movs	r3, #2
 8001d04:	e004      	b.n	8001d10 <HAL_GPIO_Init+0x1d8>
 8001d06:	2305      	movs	r3, #5
 8001d08:	e002      	b.n	8001d10 <HAL_GPIO_Init+0x1d8>
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e000      	b.n	8001d10 <HAL_GPIO_Init+0x1d8>
 8001d0e:	2300      	movs	r3, #0
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	2103      	movs	r1, #3
 8001d14:	400a      	ands	r2, r1
 8001d16:	0092      	lsls	r2, r2, #2
 8001d18:	4093      	lsls	r3, r2
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d20:	4935      	ldr	r1, [pc, #212]	; (8001df8 <HAL_GPIO_Init+0x2c0>)
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	089b      	lsrs	r3, r3, #2
 8001d26:	3302      	adds	r3, #2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d2e:	4b35      	ldr	r3, [pc, #212]	; (8001e04 <HAL_GPIO_Init+0x2cc>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	43da      	mvns	r2, r3
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	2380      	movs	r3, #128	; 0x80
 8001d44:	025b      	lsls	r3, r3, #9
 8001d46:	4013      	ands	r3, r2
 8001d48:	d003      	beq.n	8001d52 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d52:	4b2c      	ldr	r3, [pc, #176]	; (8001e04 <HAL_GPIO_Init+0x2cc>)
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001d58:	4b2a      	ldr	r3, [pc, #168]	; (8001e04 <HAL_GPIO_Init+0x2cc>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	43da      	mvns	r2, r3
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	4013      	ands	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	2380      	movs	r3, #128	; 0x80
 8001d6e:	029b      	lsls	r3, r3, #10
 8001d70:	4013      	ands	r3, r2
 8001d72:	d003      	beq.n	8001d7c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d7c:	4b21      	ldr	r3, [pc, #132]	; (8001e04 <HAL_GPIO_Init+0x2cc>)
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d82:	4b20      	ldr	r3, [pc, #128]	; (8001e04 <HAL_GPIO_Init+0x2cc>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	43da      	mvns	r2, r3
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685a      	ldr	r2, [r3, #4]
 8001d96:	2380      	movs	r3, #128	; 0x80
 8001d98:	035b      	lsls	r3, r3, #13
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	d003      	beq.n	8001da6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001da6:	4b17      	ldr	r3, [pc, #92]	; (8001e04 <HAL_GPIO_Init+0x2cc>)
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001dac:	4b15      	ldr	r3, [pc, #84]	; (8001e04 <HAL_GPIO_Init+0x2cc>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	43da      	mvns	r2, r3
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	4013      	ands	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	2380      	movs	r3, #128	; 0x80
 8001dc2:	039b      	lsls	r3, r3, #14
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	d003      	beq.n	8001dd0 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001dd0:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <HAL_GPIO_Init+0x2cc>)
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	40da      	lsrs	r2, r3
 8001de4:	1e13      	subs	r3, r2, #0
 8001de6:	d000      	beq.n	8001dea <HAL_GPIO_Init+0x2b2>
 8001de8:	e6ae      	b.n	8001b48 <HAL_GPIO_Init+0x10>
  } 
}
 8001dea:	46c0      	nop			; (mov r8, r8)
 8001dec:	46bd      	mov	sp, r7
 8001dee:	b006      	add	sp, #24
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	46c0      	nop			; (mov r8, r8)
 8001df4:	40021000 	.word	0x40021000
 8001df8:	40010000 	.word	0x40010000
 8001dfc:	48000400 	.word	0x48000400
 8001e00:	48000800 	.word	0x48000800
 8001e04:	40010400 	.word	0x40010400

08001e08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	000a      	movs	r2, r1
 8001e12:	1cbb      	adds	r3, r7, #2
 8001e14:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	1cba      	adds	r2, r7, #2
 8001e1c:	8812      	ldrh	r2, [r2, #0]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	d004      	beq.n	8001e2c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001e22:	230f      	movs	r3, #15
 8001e24:	18fb      	adds	r3, r7, r3
 8001e26:	2201      	movs	r2, #1
 8001e28:	701a      	strb	r2, [r3, #0]
 8001e2a:	e003      	b.n	8001e34 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e2c:	230f      	movs	r3, #15
 8001e2e:	18fb      	adds	r3, r7, r3
 8001e30:	2200      	movs	r2, #0
 8001e32:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001e34:	230f      	movs	r3, #15
 8001e36:	18fb      	adds	r3, r7, r3
 8001e38:	781b      	ldrb	r3, [r3, #0]
  }
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	b004      	add	sp, #16
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b082      	sub	sp, #8
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
 8001e4a:	0008      	movs	r0, r1
 8001e4c:	0011      	movs	r1, r2
 8001e4e:	1cbb      	adds	r3, r7, #2
 8001e50:	1c02      	adds	r2, r0, #0
 8001e52:	801a      	strh	r2, [r3, #0]
 8001e54:	1c7b      	adds	r3, r7, #1
 8001e56:	1c0a      	adds	r2, r1, #0
 8001e58:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e5a:	1c7b      	adds	r3, r7, #1
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d004      	beq.n	8001e6c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e62:	1cbb      	adds	r3, r7, #2
 8001e64:	881a      	ldrh	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e6a:	e003      	b.n	8001e74 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e6c:	1cbb      	adds	r3, r7, #2
 8001e6e:	881a      	ldrh	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e74:	46c0      	nop			; (mov r8, r8)
 8001e76:	46bd      	mov	sp, r7
 8001e78:	b002      	add	sp, #8
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b088      	sub	sp, #32
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d102      	bne.n	8001e90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	f000 fb76 	bl	800257c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2201      	movs	r2, #1
 8001e96:	4013      	ands	r3, r2
 8001e98:	d100      	bne.n	8001e9c <HAL_RCC_OscConfig+0x20>
 8001e9a:	e08e      	b.n	8001fba <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e9c:	4bc5      	ldr	r3, [pc, #788]	; (80021b4 <HAL_RCC_OscConfig+0x338>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	220c      	movs	r2, #12
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	2b04      	cmp	r3, #4
 8001ea6:	d00e      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ea8:	4bc2      	ldr	r3, [pc, #776]	; (80021b4 <HAL_RCC_OscConfig+0x338>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	220c      	movs	r2, #12
 8001eae:	4013      	ands	r3, r2
 8001eb0:	2b08      	cmp	r3, #8
 8001eb2:	d117      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x68>
 8001eb4:	4bbf      	ldr	r3, [pc, #764]	; (80021b4 <HAL_RCC_OscConfig+0x338>)
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	23c0      	movs	r3, #192	; 0xc0
 8001eba:	025b      	lsls	r3, r3, #9
 8001ebc:	401a      	ands	r2, r3
 8001ebe:	2380      	movs	r3, #128	; 0x80
 8001ec0:	025b      	lsls	r3, r3, #9
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d10e      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec6:	4bbb      	ldr	r3, [pc, #748]	; (80021b4 <HAL_RCC_OscConfig+0x338>)
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	2380      	movs	r3, #128	; 0x80
 8001ecc:	029b      	lsls	r3, r3, #10
 8001ece:	4013      	ands	r3, r2
 8001ed0:	d100      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x58>
 8001ed2:	e071      	b.n	8001fb8 <HAL_RCC_OscConfig+0x13c>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d000      	beq.n	8001ede <HAL_RCC_OscConfig+0x62>
 8001edc:	e06c      	b.n	8001fb8 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	f000 fb4c 	bl	800257c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d107      	bne.n	8001efc <HAL_RCC_OscConfig+0x80>
 8001eec:	4bb1      	ldr	r3, [pc, #708]	; (80021b4 <HAL_RCC_OscConfig+0x338>)
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	4bb0      	ldr	r3, [pc, #704]	; (80021b4 <HAL_RCC_OscConfig+0x338>)
 8001ef2:	2180      	movs	r1, #128	; 0x80
 8001ef4:	0249      	lsls	r1, r1, #9
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	e02f      	b.n	8001f5c <HAL_RCC_OscConfig+0xe0>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d10c      	bne.n	8001f1e <HAL_RCC_OscConfig+0xa2>
 8001f04:	4bab      	ldr	r3, [pc, #684]	; (80021b4 <HAL_RCC_OscConfig+0x338>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	4baa      	ldr	r3, [pc, #680]	; (80021b4 <HAL_RCC_OscConfig+0x338>)
 8001f0a:	49ab      	ldr	r1, [pc, #684]	; (80021b8 <HAL_RCC_OscConfig+0x33c>)
 8001f0c:	400a      	ands	r2, r1
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	4ba8      	ldr	r3, [pc, #672]	; (80021b4 <HAL_RCC_OscConfig+0x338>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	4ba7      	ldr	r3, [pc, #668]	; (80021b4 <HAL_RCC_OscConfig+0x338>)
 8001f16:	49a9      	ldr	r1, [pc, #676]	; (80021bc <HAL_RCC_OscConfig+0x340>)
 8001f18:	400a      	ands	r2, r1
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	e01e      	b.n	8001f5c <HAL_RCC_OscConfig+0xe0>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b05      	cmp	r3, #5
 8001f24:	d10e      	bne.n	8001f44 <HAL_RCC_OscConfig+0xc8>
 8001f26:	4ba3      	ldr	r3, [pc, #652]	; (80021b4 <HAL_RCC_OscConfig+0x338>)
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	4ba2      	ldr	r3, [pc, #648]	; (80021b4 <HAL_RCC_OscConfig+0x338>)
 8001f2c:	2180      	movs	r1, #128	; 0x80
 8001f2e:	02c9      	lsls	r1, r1, #11
 8001f30:	430a      	orrs	r2, r1
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	4b9f      	ldr	r3, [pc, #636]	; (80021b4 <HAL_RCC_OscConfig+0x338>)
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	4b9e      	ldr	r3, [pc, #632]	; (80021b4 <HAL_RCC_OscConfig+0x338>)
 8001f3a:	2180      	movs	r1, #128	; 0x80
 8001f3c:	0249      	lsls	r1, r1, #9
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	e00b      	b.n	8001f5c <HAL_RCC_OscConfig+0xe0>
 8001f44:	4b9b      	ldr	r3, [pc, #620]	; (80021b4 <HAL_RCC_OscConfig+0x338>)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	4b9a      	ldr	r3, [pc, #616]	; (80021b4 <HAL_RCC_OscConfig+0x338>)
 8001f4a:	499b      	ldr	r1, [pc, #620]	; (80021b8 <HAL_RCC_OscConfig+0x33c>)
 8001f4c:	400a      	ands	r2, r1
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	4b98      	ldr	r3, [pc, #608]	; (80021b4 <HAL_RCC_OscConfig+0x338>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	4b97      	ldr	r3, [pc, #604]	; (80021b4 <HAL_RCC_OscConfig+0x338>)
 8001f56:	4999      	ldr	r1, [pc, #612]	; (80021bc <HAL_RCC_OscConfig+0x340>)
 8001f58:	400a      	ands	r2, r1
 8001f5a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d014      	beq.n	8001f8e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f64:	f7ff f870 	bl	8001048 <HAL_GetTick>
 8001f68:	0003      	movs	r3, r0
 8001f6a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f6e:	f7ff f86b 	bl	8001048 <HAL_GetTick>
 8001f72:	0002      	movs	r2, r0
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b64      	cmp	r3, #100	; 0x64
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e2fd      	b.n	800257c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f80:	4b8c      	ldr	r3, [pc, #560]	; (80021b4 <HAL_RCC_OscConfig+0x338>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	2380      	movs	r3, #128	; 0x80
 8001f86:	029b      	lsls	r3, r3, #10
 8001f88:	4013      	ands	r3, r2
 8001f8a:	d0f0      	beq.n	8001f6e <HAL_RCC_OscConfig+0xf2>
 8001f8c:	e015      	b.n	8001fba <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8e:	f7ff f85b 	bl	8001048 <HAL_GetTick>
 8001f92:	0003      	movs	r3, r0
 8001f94:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f98:	f7ff f856 	bl	8001048 <HAL_GetTick>
 8001f9c:	0002      	movs	r2, r0
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b64      	cmp	r3, #100	; 0x64
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e2e8      	b.n	800257c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001faa:	4b82      	ldr	r3, [pc, #520]	; (80021b4 <HAL_RCC_OscConfig+0x338>)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	2380      	movs	r3, #128	; 0x80
 8001fb0:	029b      	lsls	r3, r3, #10
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	d1f0      	bne.n	8001f98 <HAL_RCC_OscConfig+0x11c>
 8001fb6:	e000      	b.n	8001fba <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	d100      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x14a>
 8001fc4:	e06c      	b.n	80020a0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001fc6:	4b7b      	ldr	r3, [pc, #492]	; (80021b4 <HAL_RCC_OscConfig+0x338>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	220c      	movs	r2, #12
 8001fcc:	4013      	ands	r3, r2
 8001fce:	d00e      	beq.n	8001fee <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001fd0:	4b78      	ldr	r3, [pc, #480]	; (80021b4 <HAL_RCC_OscConfig+0x338>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	220c      	movs	r2, #12
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d11f      	bne.n	800201c <HAL_RCC_OscConfig+0x1a0>
 8001fdc:	4b75      	ldr	r3, [pc, #468]	; (80021b4 <HAL_RCC_OscConfig+0x338>)
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	23c0      	movs	r3, #192	; 0xc0
 8001fe2:	025b      	lsls	r3, r3, #9
 8001fe4:	401a      	ands	r2, r3
 8001fe6:	2380      	movs	r3, #128	; 0x80
 8001fe8:	021b      	lsls	r3, r3, #8
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d116      	bne.n	800201c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fee:	4b71      	ldr	r3, [pc, #452]	; (80021b4 <HAL_RCC_OscConfig+0x338>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d005      	beq.n	8002004 <HAL_RCC_OscConfig+0x188>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d001      	beq.n	8002004 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e2bb      	b.n	800257c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002004:	4b6b      	ldr	r3, [pc, #428]	; (80021b4 <HAL_RCC_OscConfig+0x338>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	22f8      	movs	r2, #248	; 0xf8
 800200a:	4393      	bics	r3, r2
 800200c:	0019      	movs	r1, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	00da      	lsls	r2, r3, #3
 8002014:	4b67      	ldr	r3, [pc, #412]	; (80021b4 <HAL_RCC_OscConfig+0x338>)
 8002016:	430a      	orrs	r2, r1
 8002018:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800201a:	e041      	b.n	80020a0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d024      	beq.n	800206e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002024:	4b63      	ldr	r3, [pc, #396]	; (80021b4 <HAL_RCC_OscConfig+0x338>)
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	4b62      	ldr	r3, [pc, #392]	; (80021b4 <HAL_RCC_OscConfig+0x338>)
 800202a:	2101      	movs	r1, #1
 800202c:	430a      	orrs	r2, r1
 800202e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002030:	f7ff f80a 	bl	8001048 <HAL_GetTick>
 8002034:	0003      	movs	r3, r0
 8002036:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002038:	e008      	b.n	800204c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800203a:	f7ff f805 	bl	8001048 <HAL_GetTick>
 800203e:	0002      	movs	r2, r0
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e297      	b.n	800257c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800204c:	4b59      	ldr	r3, [pc, #356]	; (80021b4 <HAL_RCC_OscConfig+0x338>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2202      	movs	r2, #2
 8002052:	4013      	ands	r3, r2
 8002054:	d0f1      	beq.n	800203a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002056:	4b57      	ldr	r3, [pc, #348]	; (80021b4 <HAL_RCC_OscConfig+0x338>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	22f8      	movs	r2, #248	; 0xf8
 800205c:	4393      	bics	r3, r2
 800205e:	0019      	movs	r1, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	00da      	lsls	r2, r3, #3
 8002066:	4b53      	ldr	r3, [pc, #332]	; (80021b4 <HAL_RCC_OscConfig+0x338>)
 8002068:	430a      	orrs	r2, r1
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	e018      	b.n	80020a0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800206e:	4b51      	ldr	r3, [pc, #324]	; (80021b4 <HAL_RCC_OscConfig+0x338>)
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	4b50      	ldr	r3, [pc, #320]	; (80021b4 <HAL_RCC_OscConfig+0x338>)
 8002074:	2101      	movs	r1, #1
 8002076:	438a      	bics	r2, r1
 8002078:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207a:	f7fe ffe5 	bl	8001048 <HAL_GetTick>
 800207e:	0003      	movs	r3, r0
 8002080:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002084:	f7fe ffe0 	bl	8001048 <HAL_GetTick>
 8002088:	0002      	movs	r2, r0
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e272      	b.n	800257c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002096:	4b47      	ldr	r3, [pc, #284]	; (80021b4 <HAL_RCC_OscConfig+0x338>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2202      	movs	r2, #2
 800209c:	4013      	ands	r3, r2
 800209e:	d1f1      	bne.n	8002084 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2208      	movs	r2, #8
 80020a6:	4013      	ands	r3, r2
 80020a8:	d036      	beq.n	8002118 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d019      	beq.n	80020e6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020b2:	4b40      	ldr	r3, [pc, #256]	; (80021b4 <HAL_RCC_OscConfig+0x338>)
 80020b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020b6:	4b3f      	ldr	r3, [pc, #252]	; (80021b4 <HAL_RCC_OscConfig+0x338>)
 80020b8:	2101      	movs	r1, #1
 80020ba:	430a      	orrs	r2, r1
 80020bc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020be:	f7fe ffc3 	bl	8001048 <HAL_GetTick>
 80020c2:	0003      	movs	r3, r0
 80020c4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020c8:	f7fe ffbe 	bl	8001048 <HAL_GetTick>
 80020cc:	0002      	movs	r2, r0
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e250      	b.n	800257c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020da:	4b36      	ldr	r3, [pc, #216]	; (80021b4 <HAL_RCC_OscConfig+0x338>)
 80020dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020de:	2202      	movs	r2, #2
 80020e0:	4013      	ands	r3, r2
 80020e2:	d0f1      	beq.n	80020c8 <HAL_RCC_OscConfig+0x24c>
 80020e4:	e018      	b.n	8002118 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020e6:	4b33      	ldr	r3, [pc, #204]	; (80021b4 <HAL_RCC_OscConfig+0x338>)
 80020e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020ea:	4b32      	ldr	r3, [pc, #200]	; (80021b4 <HAL_RCC_OscConfig+0x338>)
 80020ec:	2101      	movs	r1, #1
 80020ee:	438a      	bics	r2, r1
 80020f0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f2:	f7fe ffa9 	bl	8001048 <HAL_GetTick>
 80020f6:	0003      	movs	r3, r0
 80020f8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020fc:	f7fe ffa4 	bl	8001048 <HAL_GetTick>
 8002100:	0002      	movs	r2, r0
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e236      	b.n	800257c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800210e:	4b29      	ldr	r3, [pc, #164]	; (80021b4 <HAL_RCC_OscConfig+0x338>)
 8002110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002112:	2202      	movs	r2, #2
 8002114:	4013      	ands	r3, r2
 8002116:	d1f1      	bne.n	80020fc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2204      	movs	r2, #4
 800211e:	4013      	ands	r3, r2
 8002120:	d100      	bne.n	8002124 <HAL_RCC_OscConfig+0x2a8>
 8002122:	e0b5      	b.n	8002290 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002124:	231f      	movs	r3, #31
 8002126:	18fb      	adds	r3, r7, r3
 8002128:	2200      	movs	r2, #0
 800212a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800212c:	4b21      	ldr	r3, [pc, #132]	; (80021b4 <HAL_RCC_OscConfig+0x338>)
 800212e:	69da      	ldr	r2, [r3, #28]
 8002130:	2380      	movs	r3, #128	; 0x80
 8002132:	055b      	lsls	r3, r3, #21
 8002134:	4013      	ands	r3, r2
 8002136:	d111      	bne.n	800215c <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002138:	4b1e      	ldr	r3, [pc, #120]	; (80021b4 <HAL_RCC_OscConfig+0x338>)
 800213a:	69da      	ldr	r2, [r3, #28]
 800213c:	4b1d      	ldr	r3, [pc, #116]	; (80021b4 <HAL_RCC_OscConfig+0x338>)
 800213e:	2180      	movs	r1, #128	; 0x80
 8002140:	0549      	lsls	r1, r1, #21
 8002142:	430a      	orrs	r2, r1
 8002144:	61da      	str	r2, [r3, #28]
 8002146:	4b1b      	ldr	r3, [pc, #108]	; (80021b4 <HAL_RCC_OscConfig+0x338>)
 8002148:	69da      	ldr	r2, [r3, #28]
 800214a:	2380      	movs	r3, #128	; 0x80
 800214c:	055b      	lsls	r3, r3, #21
 800214e:	4013      	ands	r3, r2
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002154:	231f      	movs	r3, #31
 8002156:	18fb      	adds	r3, r7, r3
 8002158:	2201      	movs	r2, #1
 800215a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800215c:	4b18      	ldr	r3, [pc, #96]	; (80021c0 <HAL_RCC_OscConfig+0x344>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	2380      	movs	r3, #128	; 0x80
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	4013      	ands	r3, r2
 8002166:	d11a      	bne.n	800219e <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002168:	4b15      	ldr	r3, [pc, #84]	; (80021c0 <HAL_RCC_OscConfig+0x344>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	4b14      	ldr	r3, [pc, #80]	; (80021c0 <HAL_RCC_OscConfig+0x344>)
 800216e:	2180      	movs	r1, #128	; 0x80
 8002170:	0049      	lsls	r1, r1, #1
 8002172:	430a      	orrs	r2, r1
 8002174:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002176:	f7fe ff67 	bl	8001048 <HAL_GetTick>
 800217a:	0003      	movs	r3, r0
 800217c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800217e:	e008      	b.n	8002192 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002180:	f7fe ff62 	bl	8001048 <HAL_GetTick>
 8002184:	0002      	movs	r2, r0
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b64      	cmp	r3, #100	; 0x64
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e1f4      	b.n	800257c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002192:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <HAL_RCC_OscConfig+0x344>)
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	2380      	movs	r3, #128	; 0x80
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	4013      	ands	r3, r2
 800219c:	d0f0      	beq.n	8002180 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d10e      	bne.n	80021c4 <HAL_RCC_OscConfig+0x348>
 80021a6:	4b03      	ldr	r3, [pc, #12]	; (80021b4 <HAL_RCC_OscConfig+0x338>)
 80021a8:	6a1a      	ldr	r2, [r3, #32]
 80021aa:	4b02      	ldr	r3, [pc, #8]	; (80021b4 <HAL_RCC_OscConfig+0x338>)
 80021ac:	2101      	movs	r1, #1
 80021ae:	430a      	orrs	r2, r1
 80021b0:	621a      	str	r2, [r3, #32]
 80021b2:	e035      	b.n	8002220 <HAL_RCC_OscConfig+0x3a4>
 80021b4:	40021000 	.word	0x40021000
 80021b8:	fffeffff 	.word	0xfffeffff
 80021bc:	fffbffff 	.word	0xfffbffff
 80021c0:	40007000 	.word	0x40007000
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d10c      	bne.n	80021e6 <HAL_RCC_OscConfig+0x36a>
 80021cc:	4bca      	ldr	r3, [pc, #808]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 80021ce:	6a1a      	ldr	r2, [r3, #32]
 80021d0:	4bc9      	ldr	r3, [pc, #804]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 80021d2:	2101      	movs	r1, #1
 80021d4:	438a      	bics	r2, r1
 80021d6:	621a      	str	r2, [r3, #32]
 80021d8:	4bc7      	ldr	r3, [pc, #796]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 80021da:	6a1a      	ldr	r2, [r3, #32]
 80021dc:	4bc6      	ldr	r3, [pc, #792]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 80021de:	2104      	movs	r1, #4
 80021e0:	438a      	bics	r2, r1
 80021e2:	621a      	str	r2, [r3, #32]
 80021e4:	e01c      	b.n	8002220 <HAL_RCC_OscConfig+0x3a4>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	2b05      	cmp	r3, #5
 80021ec:	d10c      	bne.n	8002208 <HAL_RCC_OscConfig+0x38c>
 80021ee:	4bc2      	ldr	r3, [pc, #776]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 80021f0:	6a1a      	ldr	r2, [r3, #32]
 80021f2:	4bc1      	ldr	r3, [pc, #772]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 80021f4:	2104      	movs	r1, #4
 80021f6:	430a      	orrs	r2, r1
 80021f8:	621a      	str	r2, [r3, #32]
 80021fa:	4bbf      	ldr	r3, [pc, #764]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 80021fc:	6a1a      	ldr	r2, [r3, #32]
 80021fe:	4bbe      	ldr	r3, [pc, #760]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 8002200:	2101      	movs	r1, #1
 8002202:	430a      	orrs	r2, r1
 8002204:	621a      	str	r2, [r3, #32]
 8002206:	e00b      	b.n	8002220 <HAL_RCC_OscConfig+0x3a4>
 8002208:	4bbb      	ldr	r3, [pc, #748]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 800220a:	6a1a      	ldr	r2, [r3, #32]
 800220c:	4bba      	ldr	r3, [pc, #744]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 800220e:	2101      	movs	r1, #1
 8002210:	438a      	bics	r2, r1
 8002212:	621a      	str	r2, [r3, #32]
 8002214:	4bb8      	ldr	r3, [pc, #736]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 8002216:	6a1a      	ldr	r2, [r3, #32]
 8002218:	4bb7      	ldr	r3, [pc, #732]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 800221a:	2104      	movs	r1, #4
 800221c:	438a      	bics	r2, r1
 800221e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d014      	beq.n	8002252 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002228:	f7fe ff0e 	bl	8001048 <HAL_GetTick>
 800222c:	0003      	movs	r3, r0
 800222e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002230:	e009      	b.n	8002246 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002232:	f7fe ff09 	bl	8001048 <HAL_GetTick>
 8002236:	0002      	movs	r2, r0
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	4aaf      	ldr	r2, [pc, #700]	; (80024fc <HAL_RCC_OscConfig+0x680>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e19a      	b.n	800257c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002246:	4bac      	ldr	r3, [pc, #688]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	2202      	movs	r2, #2
 800224c:	4013      	ands	r3, r2
 800224e:	d0f0      	beq.n	8002232 <HAL_RCC_OscConfig+0x3b6>
 8002250:	e013      	b.n	800227a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002252:	f7fe fef9 	bl	8001048 <HAL_GetTick>
 8002256:	0003      	movs	r3, r0
 8002258:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800225a:	e009      	b.n	8002270 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800225c:	f7fe fef4 	bl	8001048 <HAL_GetTick>
 8002260:	0002      	movs	r2, r0
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	4aa5      	ldr	r2, [pc, #660]	; (80024fc <HAL_RCC_OscConfig+0x680>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e185      	b.n	800257c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002270:	4ba1      	ldr	r3, [pc, #644]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	2202      	movs	r2, #2
 8002276:	4013      	ands	r3, r2
 8002278:	d1f0      	bne.n	800225c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800227a:	231f      	movs	r3, #31
 800227c:	18fb      	adds	r3, r7, r3
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d105      	bne.n	8002290 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002284:	4b9c      	ldr	r3, [pc, #624]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 8002286:	69da      	ldr	r2, [r3, #28]
 8002288:	4b9b      	ldr	r3, [pc, #620]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 800228a:	499d      	ldr	r1, [pc, #628]	; (8002500 <HAL_RCC_OscConfig+0x684>)
 800228c:	400a      	ands	r2, r1
 800228e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2210      	movs	r2, #16
 8002296:	4013      	ands	r3, r2
 8002298:	d063      	beq.n	8002362 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d12a      	bne.n	80022f8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80022a2:	4b95      	ldr	r3, [pc, #596]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 80022a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022a6:	4b94      	ldr	r3, [pc, #592]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 80022a8:	2104      	movs	r1, #4
 80022aa:	430a      	orrs	r2, r1
 80022ac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80022ae:	4b92      	ldr	r3, [pc, #584]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 80022b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022b2:	4b91      	ldr	r3, [pc, #580]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 80022b4:	2101      	movs	r1, #1
 80022b6:	430a      	orrs	r2, r1
 80022b8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ba:	f7fe fec5 	bl	8001048 <HAL_GetTick>
 80022be:	0003      	movs	r3, r0
 80022c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80022c4:	f7fe fec0 	bl	8001048 <HAL_GetTick>
 80022c8:	0002      	movs	r2, r0
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e152      	b.n	800257c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80022d6:	4b88      	ldr	r3, [pc, #544]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 80022d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022da:	2202      	movs	r2, #2
 80022dc:	4013      	ands	r3, r2
 80022de:	d0f1      	beq.n	80022c4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80022e0:	4b85      	ldr	r3, [pc, #532]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 80022e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e4:	22f8      	movs	r2, #248	; 0xf8
 80022e6:	4393      	bics	r3, r2
 80022e8:	0019      	movs	r1, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	00da      	lsls	r2, r3, #3
 80022f0:	4b81      	ldr	r3, [pc, #516]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 80022f2:	430a      	orrs	r2, r1
 80022f4:	635a      	str	r2, [r3, #52]	; 0x34
 80022f6:	e034      	b.n	8002362 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	695b      	ldr	r3, [r3, #20]
 80022fc:	3305      	adds	r3, #5
 80022fe:	d111      	bne.n	8002324 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002300:	4b7d      	ldr	r3, [pc, #500]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 8002302:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002304:	4b7c      	ldr	r3, [pc, #496]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 8002306:	2104      	movs	r1, #4
 8002308:	438a      	bics	r2, r1
 800230a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800230c:	4b7a      	ldr	r3, [pc, #488]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 800230e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002310:	22f8      	movs	r2, #248	; 0xf8
 8002312:	4393      	bics	r3, r2
 8002314:	0019      	movs	r1, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	00da      	lsls	r2, r3, #3
 800231c:	4b76      	ldr	r3, [pc, #472]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 800231e:	430a      	orrs	r2, r1
 8002320:	635a      	str	r2, [r3, #52]	; 0x34
 8002322:	e01e      	b.n	8002362 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002324:	4b74      	ldr	r3, [pc, #464]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 8002326:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002328:	4b73      	ldr	r3, [pc, #460]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 800232a:	2104      	movs	r1, #4
 800232c:	430a      	orrs	r2, r1
 800232e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002330:	4b71      	ldr	r3, [pc, #452]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 8002332:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002334:	4b70      	ldr	r3, [pc, #448]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 8002336:	2101      	movs	r1, #1
 8002338:	438a      	bics	r2, r1
 800233a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800233c:	f7fe fe84 	bl	8001048 <HAL_GetTick>
 8002340:	0003      	movs	r3, r0
 8002342:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002344:	e008      	b.n	8002358 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002346:	f7fe fe7f 	bl	8001048 <HAL_GetTick>
 800234a:	0002      	movs	r2, r0
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e111      	b.n	800257c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002358:	4b67      	ldr	r3, [pc, #412]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 800235a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800235c:	2202      	movs	r2, #2
 800235e:	4013      	ands	r3, r2
 8002360:	d1f1      	bne.n	8002346 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2220      	movs	r2, #32
 8002368:	4013      	ands	r3, r2
 800236a:	d05c      	beq.n	8002426 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800236c:	4b62      	ldr	r3, [pc, #392]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	220c      	movs	r2, #12
 8002372:	4013      	ands	r3, r2
 8002374:	2b0c      	cmp	r3, #12
 8002376:	d00e      	beq.n	8002396 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002378:	4b5f      	ldr	r3, [pc, #380]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	220c      	movs	r2, #12
 800237e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002380:	2b08      	cmp	r3, #8
 8002382:	d114      	bne.n	80023ae <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002384:	4b5c      	ldr	r3, [pc, #368]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	23c0      	movs	r3, #192	; 0xc0
 800238a:	025b      	lsls	r3, r3, #9
 800238c:	401a      	ands	r2, r3
 800238e:	23c0      	movs	r3, #192	; 0xc0
 8002390:	025b      	lsls	r3, r3, #9
 8002392:	429a      	cmp	r2, r3
 8002394:	d10b      	bne.n	80023ae <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002396:	4b58      	ldr	r3, [pc, #352]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 8002398:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800239a:	2380      	movs	r3, #128	; 0x80
 800239c:	025b      	lsls	r3, r3, #9
 800239e:	4013      	ands	r3, r2
 80023a0:	d040      	beq.n	8002424 <HAL_RCC_OscConfig+0x5a8>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d03c      	beq.n	8002424 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e0e6      	b.n	800257c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d01b      	beq.n	80023ee <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80023b6:	4b50      	ldr	r3, [pc, #320]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 80023b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023ba:	4b4f      	ldr	r3, [pc, #316]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 80023bc:	2180      	movs	r1, #128	; 0x80
 80023be:	0249      	lsls	r1, r1, #9
 80023c0:	430a      	orrs	r2, r1
 80023c2:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c4:	f7fe fe40 	bl	8001048 <HAL_GetTick>
 80023c8:	0003      	movs	r3, r0
 80023ca:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023ce:	f7fe fe3b 	bl	8001048 <HAL_GetTick>
 80023d2:	0002      	movs	r2, r0
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e0cd      	b.n	800257c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80023e0:	4b45      	ldr	r3, [pc, #276]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 80023e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023e4:	2380      	movs	r3, #128	; 0x80
 80023e6:	025b      	lsls	r3, r3, #9
 80023e8:	4013      	ands	r3, r2
 80023ea:	d0f0      	beq.n	80023ce <HAL_RCC_OscConfig+0x552>
 80023ec:	e01b      	b.n	8002426 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80023ee:	4b42      	ldr	r3, [pc, #264]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 80023f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023f2:	4b41      	ldr	r3, [pc, #260]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 80023f4:	4943      	ldr	r1, [pc, #268]	; (8002504 <HAL_RCC_OscConfig+0x688>)
 80023f6:	400a      	ands	r2, r1
 80023f8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fa:	f7fe fe25 	bl	8001048 <HAL_GetTick>
 80023fe:	0003      	movs	r3, r0
 8002400:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002404:	f7fe fe20 	bl	8001048 <HAL_GetTick>
 8002408:	0002      	movs	r2, r0
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e0b2      	b.n	800257c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002416:	4b38      	ldr	r3, [pc, #224]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 8002418:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800241a:	2380      	movs	r3, #128	; 0x80
 800241c:	025b      	lsls	r3, r3, #9
 800241e:	4013      	ands	r3, r2
 8002420:	d1f0      	bne.n	8002404 <HAL_RCC_OscConfig+0x588>
 8002422:	e000      	b.n	8002426 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002424:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242a:	2b00      	cmp	r3, #0
 800242c:	d100      	bne.n	8002430 <HAL_RCC_OscConfig+0x5b4>
 800242e:	e0a4      	b.n	800257a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002430:	4b31      	ldr	r3, [pc, #196]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	220c      	movs	r2, #12
 8002436:	4013      	ands	r3, r2
 8002438:	2b08      	cmp	r3, #8
 800243a:	d100      	bne.n	800243e <HAL_RCC_OscConfig+0x5c2>
 800243c:	e078      	b.n	8002530 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002442:	2b02      	cmp	r3, #2
 8002444:	d14c      	bne.n	80024e0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002446:	4b2c      	ldr	r3, [pc, #176]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	4b2b      	ldr	r3, [pc, #172]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 800244c:	492e      	ldr	r1, [pc, #184]	; (8002508 <HAL_RCC_OscConfig+0x68c>)
 800244e:	400a      	ands	r2, r1
 8002450:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002452:	f7fe fdf9 	bl	8001048 <HAL_GetTick>
 8002456:	0003      	movs	r3, r0
 8002458:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800245c:	f7fe fdf4 	bl	8001048 <HAL_GetTick>
 8002460:	0002      	movs	r2, r0
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e086      	b.n	800257c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800246e:	4b22      	ldr	r3, [pc, #136]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	2380      	movs	r3, #128	; 0x80
 8002474:	049b      	lsls	r3, r3, #18
 8002476:	4013      	ands	r3, r2
 8002478:	d1f0      	bne.n	800245c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800247a:	4b1f      	ldr	r3, [pc, #124]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 800247c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247e:	220f      	movs	r2, #15
 8002480:	4393      	bics	r3, r2
 8002482:	0019      	movs	r1, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002488:	4b1b      	ldr	r3, [pc, #108]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 800248a:	430a      	orrs	r2, r1
 800248c:	62da      	str	r2, [r3, #44]	; 0x2c
 800248e:	4b1a      	ldr	r3, [pc, #104]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	4a1e      	ldr	r2, [pc, #120]	; (800250c <HAL_RCC_OscConfig+0x690>)
 8002494:	4013      	ands	r3, r2
 8002496:	0019      	movs	r1, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a0:	431a      	orrs	r2, r3
 80024a2:	4b15      	ldr	r3, [pc, #84]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 80024a4:	430a      	orrs	r2, r1
 80024a6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024a8:	4b13      	ldr	r3, [pc, #76]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	4b12      	ldr	r3, [pc, #72]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 80024ae:	2180      	movs	r1, #128	; 0x80
 80024b0:	0449      	lsls	r1, r1, #17
 80024b2:	430a      	orrs	r2, r1
 80024b4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b6:	f7fe fdc7 	bl	8001048 <HAL_GetTick>
 80024ba:	0003      	movs	r3, r0
 80024bc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024c0:	f7fe fdc2 	bl	8001048 <HAL_GetTick>
 80024c4:	0002      	movs	r2, r0
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e054      	b.n	800257c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024d2:	4b09      	ldr	r3, [pc, #36]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	2380      	movs	r3, #128	; 0x80
 80024d8:	049b      	lsls	r3, r3, #18
 80024da:	4013      	ands	r3, r2
 80024dc:	d0f0      	beq.n	80024c0 <HAL_RCC_OscConfig+0x644>
 80024de:	e04c      	b.n	800257a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e0:	4b05      	ldr	r3, [pc, #20]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	4b04      	ldr	r3, [pc, #16]	; (80024f8 <HAL_RCC_OscConfig+0x67c>)
 80024e6:	4908      	ldr	r1, [pc, #32]	; (8002508 <HAL_RCC_OscConfig+0x68c>)
 80024e8:	400a      	ands	r2, r1
 80024ea:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ec:	f7fe fdac 	bl	8001048 <HAL_GetTick>
 80024f0:	0003      	movs	r3, r0
 80024f2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024f4:	e015      	b.n	8002522 <HAL_RCC_OscConfig+0x6a6>
 80024f6:	46c0      	nop			; (mov r8, r8)
 80024f8:	40021000 	.word	0x40021000
 80024fc:	00001388 	.word	0x00001388
 8002500:	efffffff 	.word	0xefffffff
 8002504:	fffeffff 	.word	0xfffeffff
 8002508:	feffffff 	.word	0xfeffffff
 800250c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002510:	f7fe fd9a 	bl	8001048 <HAL_GetTick>
 8002514:	0002      	movs	r2, r0
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e02c      	b.n	800257c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002522:	4b18      	ldr	r3, [pc, #96]	; (8002584 <HAL_RCC_OscConfig+0x708>)
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	2380      	movs	r3, #128	; 0x80
 8002528:	049b      	lsls	r3, r3, #18
 800252a:	4013      	ands	r3, r2
 800252c:	d1f0      	bne.n	8002510 <HAL_RCC_OscConfig+0x694>
 800252e:	e024      	b.n	800257a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002534:	2b01      	cmp	r3, #1
 8002536:	d101      	bne.n	800253c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e01f      	b.n	800257c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800253c:	4b11      	ldr	r3, [pc, #68]	; (8002584 <HAL_RCC_OscConfig+0x708>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002542:	4b10      	ldr	r3, [pc, #64]	; (8002584 <HAL_RCC_OscConfig+0x708>)
 8002544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002546:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002548:	697a      	ldr	r2, [r7, #20]
 800254a:	23c0      	movs	r3, #192	; 0xc0
 800254c:	025b      	lsls	r3, r3, #9
 800254e:	401a      	ands	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002554:	429a      	cmp	r2, r3
 8002556:	d10e      	bne.n	8002576 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	220f      	movs	r2, #15
 800255c:	401a      	ands	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002562:	429a      	cmp	r2, r3
 8002564:	d107      	bne.n	8002576 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	23f0      	movs	r3, #240	; 0xf0
 800256a:	039b      	lsls	r3, r3, #14
 800256c:	401a      	ands	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002572:	429a      	cmp	r2, r3
 8002574:	d001      	beq.n	800257a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e000      	b.n	800257c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	0018      	movs	r0, r3
 800257e:	46bd      	mov	sp, r7
 8002580:	b008      	add	sp, #32
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40021000 	.word	0x40021000

08002588 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e0bf      	b.n	800271c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800259c:	4b61      	ldr	r3, [pc, #388]	; (8002724 <HAL_RCC_ClockConfig+0x19c>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2201      	movs	r2, #1
 80025a2:	4013      	ands	r3, r2
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d911      	bls.n	80025ce <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025aa:	4b5e      	ldr	r3, [pc, #376]	; (8002724 <HAL_RCC_ClockConfig+0x19c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2201      	movs	r2, #1
 80025b0:	4393      	bics	r3, r2
 80025b2:	0019      	movs	r1, r3
 80025b4:	4b5b      	ldr	r3, [pc, #364]	; (8002724 <HAL_RCC_ClockConfig+0x19c>)
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	430a      	orrs	r2, r1
 80025ba:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025bc:	4b59      	ldr	r3, [pc, #356]	; (8002724 <HAL_RCC_ClockConfig+0x19c>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2201      	movs	r2, #1
 80025c2:	4013      	ands	r3, r2
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d001      	beq.n	80025ce <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e0a6      	b.n	800271c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2202      	movs	r2, #2
 80025d4:	4013      	ands	r3, r2
 80025d6:	d015      	beq.n	8002604 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2204      	movs	r2, #4
 80025de:	4013      	ands	r3, r2
 80025e0:	d006      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80025e2:	4b51      	ldr	r3, [pc, #324]	; (8002728 <HAL_RCC_ClockConfig+0x1a0>)
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	4b50      	ldr	r3, [pc, #320]	; (8002728 <HAL_RCC_ClockConfig+0x1a0>)
 80025e8:	21e0      	movs	r1, #224	; 0xe0
 80025ea:	00c9      	lsls	r1, r1, #3
 80025ec:	430a      	orrs	r2, r1
 80025ee:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025f0:	4b4d      	ldr	r3, [pc, #308]	; (8002728 <HAL_RCC_ClockConfig+0x1a0>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	22f0      	movs	r2, #240	; 0xf0
 80025f6:	4393      	bics	r3, r2
 80025f8:	0019      	movs	r1, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	689a      	ldr	r2, [r3, #8]
 80025fe:	4b4a      	ldr	r3, [pc, #296]	; (8002728 <HAL_RCC_ClockConfig+0x1a0>)
 8002600:	430a      	orrs	r2, r1
 8002602:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2201      	movs	r2, #1
 800260a:	4013      	ands	r3, r2
 800260c:	d04c      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d107      	bne.n	8002626 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002616:	4b44      	ldr	r3, [pc, #272]	; (8002728 <HAL_RCC_ClockConfig+0x1a0>)
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	2380      	movs	r3, #128	; 0x80
 800261c:	029b      	lsls	r3, r3, #10
 800261e:	4013      	ands	r3, r2
 8002620:	d120      	bne.n	8002664 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e07a      	b.n	800271c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	2b02      	cmp	r3, #2
 800262c:	d107      	bne.n	800263e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800262e:	4b3e      	ldr	r3, [pc, #248]	; (8002728 <HAL_RCC_ClockConfig+0x1a0>)
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	2380      	movs	r3, #128	; 0x80
 8002634:	049b      	lsls	r3, r3, #18
 8002636:	4013      	ands	r3, r2
 8002638:	d114      	bne.n	8002664 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e06e      	b.n	800271c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2b03      	cmp	r3, #3
 8002644:	d107      	bne.n	8002656 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002646:	4b38      	ldr	r3, [pc, #224]	; (8002728 <HAL_RCC_ClockConfig+0x1a0>)
 8002648:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800264a:	2380      	movs	r3, #128	; 0x80
 800264c:	025b      	lsls	r3, r3, #9
 800264e:	4013      	ands	r3, r2
 8002650:	d108      	bne.n	8002664 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e062      	b.n	800271c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002656:	4b34      	ldr	r3, [pc, #208]	; (8002728 <HAL_RCC_ClockConfig+0x1a0>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2202      	movs	r2, #2
 800265c:	4013      	ands	r3, r2
 800265e:	d101      	bne.n	8002664 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e05b      	b.n	800271c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002664:	4b30      	ldr	r3, [pc, #192]	; (8002728 <HAL_RCC_ClockConfig+0x1a0>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	2203      	movs	r2, #3
 800266a:	4393      	bics	r3, r2
 800266c:	0019      	movs	r1, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	4b2d      	ldr	r3, [pc, #180]	; (8002728 <HAL_RCC_ClockConfig+0x1a0>)
 8002674:	430a      	orrs	r2, r1
 8002676:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002678:	f7fe fce6 	bl	8001048 <HAL_GetTick>
 800267c:	0003      	movs	r3, r0
 800267e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002680:	e009      	b.n	8002696 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002682:	f7fe fce1 	bl	8001048 <HAL_GetTick>
 8002686:	0002      	movs	r2, r0
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	4a27      	ldr	r2, [pc, #156]	; (800272c <HAL_RCC_ClockConfig+0x1a4>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e042      	b.n	800271c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002696:	4b24      	ldr	r3, [pc, #144]	; (8002728 <HAL_RCC_ClockConfig+0x1a0>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	220c      	movs	r2, #12
 800269c:	401a      	ands	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d1ec      	bne.n	8002682 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026a8:	4b1e      	ldr	r3, [pc, #120]	; (8002724 <HAL_RCC_ClockConfig+0x19c>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2201      	movs	r2, #1
 80026ae:	4013      	ands	r3, r2
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d211      	bcs.n	80026da <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026b6:	4b1b      	ldr	r3, [pc, #108]	; (8002724 <HAL_RCC_ClockConfig+0x19c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2201      	movs	r2, #1
 80026bc:	4393      	bics	r3, r2
 80026be:	0019      	movs	r1, r3
 80026c0:	4b18      	ldr	r3, [pc, #96]	; (8002724 <HAL_RCC_ClockConfig+0x19c>)
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c8:	4b16      	ldr	r3, [pc, #88]	; (8002724 <HAL_RCC_ClockConfig+0x19c>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2201      	movs	r2, #1
 80026ce:	4013      	ands	r3, r2
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d001      	beq.n	80026da <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e020      	b.n	800271c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2204      	movs	r2, #4
 80026e0:	4013      	ands	r3, r2
 80026e2:	d009      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80026e4:	4b10      	ldr	r3, [pc, #64]	; (8002728 <HAL_RCC_ClockConfig+0x1a0>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	4a11      	ldr	r2, [pc, #68]	; (8002730 <HAL_RCC_ClockConfig+0x1a8>)
 80026ea:	4013      	ands	r3, r2
 80026ec:	0019      	movs	r1, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68da      	ldr	r2, [r3, #12]
 80026f2:	4b0d      	ldr	r3, [pc, #52]	; (8002728 <HAL_RCC_ClockConfig+0x1a0>)
 80026f4:	430a      	orrs	r2, r1
 80026f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80026f8:	f000 f820 	bl	800273c <HAL_RCC_GetSysClockFreq>
 80026fc:	0001      	movs	r1, r0
 80026fe:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <HAL_RCC_ClockConfig+0x1a0>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	091b      	lsrs	r3, r3, #4
 8002704:	220f      	movs	r2, #15
 8002706:	4013      	ands	r3, r2
 8002708:	4a0a      	ldr	r2, [pc, #40]	; (8002734 <HAL_RCC_ClockConfig+0x1ac>)
 800270a:	5cd3      	ldrb	r3, [r2, r3]
 800270c:	000a      	movs	r2, r1
 800270e:	40da      	lsrs	r2, r3
 8002710:	4b09      	ldr	r3, [pc, #36]	; (8002738 <HAL_RCC_ClockConfig+0x1b0>)
 8002712:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002714:	2000      	movs	r0, #0
 8002716:	f7fe fc51 	bl	8000fbc <HAL_InitTick>
  
  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	0018      	movs	r0, r3
 800271e:	46bd      	mov	sp, r7
 8002720:	b004      	add	sp, #16
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40022000 	.word	0x40022000
 8002728:	40021000 	.word	0x40021000
 800272c:	00001388 	.word	0x00001388
 8002730:	fffff8ff 	.word	0xfffff8ff
 8002734:	080037e4 	.word	0x080037e4
 8002738:	20000000 	.word	0x20000000

0800273c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800273c:	b590      	push	{r4, r7, lr}
 800273e:	b08f      	sub	sp, #60	; 0x3c
 8002740:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002742:	2314      	movs	r3, #20
 8002744:	18fb      	adds	r3, r7, r3
 8002746:	4a37      	ldr	r2, [pc, #220]	; (8002824 <HAL_RCC_GetSysClockFreq+0xe8>)
 8002748:	ca13      	ldmia	r2!, {r0, r1, r4}
 800274a:	c313      	stmia	r3!, {r0, r1, r4}
 800274c:	6812      	ldr	r2, [r2, #0]
 800274e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002750:	1d3b      	adds	r3, r7, #4
 8002752:	4a35      	ldr	r2, [pc, #212]	; (8002828 <HAL_RCC_GetSysClockFreq+0xec>)
 8002754:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002756:	c313      	stmia	r3!, {r0, r1, r4}
 8002758:	6812      	ldr	r2, [r2, #0]
 800275a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800275c:	2300      	movs	r3, #0
 800275e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002760:	2300      	movs	r3, #0
 8002762:	62bb      	str	r3, [r7, #40]	; 0x28
 8002764:	2300      	movs	r3, #0
 8002766:	637b      	str	r3, [r7, #52]	; 0x34
 8002768:	2300      	movs	r3, #0
 800276a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800276c:	2300      	movs	r3, #0
 800276e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002770:	4b2e      	ldr	r3, [pc, #184]	; (800282c <HAL_RCC_GetSysClockFreq+0xf0>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002778:	220c      	movs	r2, #12
 800277a:	4013      	ands	r3, r2
 800277c:	2b08      	cmp	r3, #8
 800277e:	d006      	beq.n	800278e <HAL_RCC_GetSysClockFreq+0x52>
 8002780:	2b0c      	cmp	r3, #12
 8002782:	d043      	beq.n	800280c <HAL_RCC_GetSysClockFreq+0xd0>
 8002784:	2b04      	cmp	r3, #4
 8002786:	d144      	bne.n	8002812 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002788:	4b29      	ldr	r3, [pc, #164]	; (8002830 <HAL_RCC_GetSysClockFreq+0xf4>)
 800278a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800278c:	e044      	b.n	8002818 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800278e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002790:	0c9b      	lsrs	r3, r3, #18
 8002792:	220f      	movs	r2, #15
 8002794:	4013      	ands	r3, r2
 8002796:	2214      	movs	r2, #20
 8002798:	18ba      	adds	r2, r7, r2
 800279a:	5cd3      	ldrb	r3, [r2, r3]
 800279c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800279e:	4b23      	ldr	r3, [pc, #140]	; (800282c <HAL_RCC_GetSysClockFreq+0xf0>)
 80027a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a2:	220f      	movs	r2, #15
 80027a4:	4013      	ands	r3, r2
 80027a6:	1d3a      	adds	r2, r7, #4
 80027a8:	5cd3      	ldrb	r3, [r2, r3]
 80027aa:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80027ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027ae:	23c0      	movs	r3, #192	; 0xc0
 80027b0:	025b      	lsls	r3, r3, #9
 80027b2:	401a      	ands	r2, r3
 80027b4:	2380      	movs	r3, #128	; 0x80
 80027b6:	025b      	lsls	r3, r3, #9
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d109      	bne.n	80027d0 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80027bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027be:	481c      	ldr	r0, [pc, #112]	; (8002830 <HAL_RCC_GetSysClockFreq+0xf4>)
 80027c0:	f7fd fca2 	bl	8000108 <__udivsi3>
 80027c4:	0003      	movs	r3, r0
 80027c6:	001a      	movs	r2, r3
 80027c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ca:	4353      	muls	r3, r2
 80027cc:	637b      	str	r3, [r7, #52]	; 0x34
 80027ce:	e01a      	b.n	8002806 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80027d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027d2:	23c0      	movs	r3, #192	; 0xc0
 80027d4:	025b      	lsls	r3, r3, #9
 80027d6:	401a      	ands	r2, r3
 80027d8:	23c0      	movs	r3, #192	; 0xc0
 80027da:	025b      	lsls	r3, r3, #9
 80027dc:	429a      	cmp	r2, r3
 80027de:	d109      	bne.n	80027f4 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80027e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027e2:	4814      	ldr	r0, [pc, #80]	; (8002834 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027e4:	f7fd fc90 	bl	8000108 <__udivsi3>
 80027e8:	0003      	movs	r3, r0
 80027ea:	001a      	movs	r2, r3
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ee:	4353      	muls	r3, r2
 80027f0:	637b      	str	r3, [r7, #52]	; 0x34
 80027f2:	e008      	b.n	8002806 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80027f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027f6:	480e      	ldr	r0, [pc, #56]	; (8002830 <HAL_RCC_GetSysClockFreq+0xf4>)
 80027f8:	f7fd fc86 	bl	8000108 <__udivsi3>
 80027fc:	0003      	movs	r3, r0
 80027fe:	001a      	movs	r2, r3
 8002800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002802:	4353      	muls	r3, r2
 8002804:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002808:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800280a:	e005      	b.n	8002818 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800280c:	4b09      	ldr	r3, [pc, #36]	; (8002834 <HAL_RCC_GetSysClockFreq+0xf8>)
 800280e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002810:	e002      	b.n	8002818 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002812:	4b07      	ldr	r3, [pc, #28]	; (8002830 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002814:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002816:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800281a:	0018      	movs	r0, r3
 800281c:	46bd      	mov	sp, r7
 800281e:	b00f      	add	sp, #60	; 0x3c
 8002820:	bd90      	pop	{r4, r7, pc}
 8002822:	46c0      	nop			; (mov r8, r8)
 8002824:	080037c4 	.word	0x080037c4
 8002828:	080037d4 	.word	0x080037d4
 800282c:	40021000 	.word	0x40021000
 8002830:	007a1200 	.word	0x007a1200
 8002834:	02dc6c00 	.word	0x02dc6c00

08002838 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800283c:	4b02      	ldr	r3, [pc, #8]	; (8002848 <HAL_RCC_GetHCLKFreq+0x10>)
 800283e:	681b      	ldr	r3, [r3, #0]
}
 8002840:	0018      	movs	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	46c0      	nop			; (mov r8, r8)
 8002848:	20000000 	.word	0x20000000

0800284c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002850:	f7ff fff2 	bl	8002838 <HAL_RCC_GetHCLKFreq>
 8002854:	0001      	movs	r1, r0
 8002856:	4b06      	ldr	r3, [pc, #24]	; (8002870 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	0a1b      	lsrs	r3, r3, #8
 800285c:	2207      	movs	r2, #7
 800285e:	4013      	ands	r3, r2
 8002860:	4a04      	ldr	r2, [pc, #16]	; (8002874 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002862:	5cd3      	ldrb	r3, [r2, r3]
 8002864:	40d9      	lsrs	r1, r3
 8002866:	000b      	movs	r3, r1
}    
 8002868:	0018      	movs	r0, r3
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	46c0      	nop			; (mov r8, r8)
 8002870:	40021000 	.word	0x40021000
 8002874:	080037f4 	.word	0x080037f4

08002878 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e01e      	b.n	80028c8 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	223d      	movs	r2, #61	; 0x3d
 800288e:	5c9b      	ldrb	r3, [r3, r2]
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d107      	bne.n	80028a6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	223c      	movs	r2, #60	; 0x3c
 800289a:	2100      	movs	r1, #0
 800289c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	0018      	movs	r0, r3
 80028a2:	f7fe fa3b 	bl	8000d1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	223d      	movs	r2, #61	; 0x3d
 80028aa:	2102      	movs	r1, #2
 80028ac:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	3304      	adds	r3, #4
 80028b6:	0019      	movs	r1, r3
 80028b8:	0010      	movs	r0, r2
 80028ba:	f000 f8ed 	bl	8002a98 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	223d      	movs	r2, #61	; 0x3d
 80028c2:	2101      	movs	r1, #1
 80028c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	0018      	movs	r0, r3
 80028ca:	46bd      	mov	sp, r7
 80028cc:	b002      	add	sp, #8
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e01e      	b.n	8002920 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	223d      	movs	r2, #61	; 0x3d
 80028e6:	5c9b      	ldrb	r3, [r3, r2]
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d107      	bne.n	80028fe <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	223c      	movs	r2, #60	; 0x3c
 80028f2:	2100      	movs	r1, #0
 80028f4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	0018      	movs	r0, r3
 80028fa:	f7fe f9f1 	bl	8000ce0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	223d      	movs	r2, #61	; 0x3d
 8002902:	2102      	movs	r1, #2
 8002904:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	3304      	adds	r3, #4
 800290e:	0019      	movs	r1, r3
 8002910:	0010      	movs	r0, r2
 8002912:	f000 f8c1 	bl	8002a98 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	223d      	movs	r2, #61	; 0x3d
 800291a:	2101      	movs	r1, #1
 800291c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	0018      	movs	r0, r3
 8002922:	46bd      	mov	sp, r7
 8002924:	b002      	add	sp, #8
 8002926:	bd80      	pop	{r7, pc}

08002928 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	223c      	movs	r2, #60	; 0x3c
 8002938:	5c9b      	ldrb	r3, [r3, r2]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d101      	bne.n	8002942 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800293e:	2302      	movs	r3, #2
 8002940:	e0a4      	b.n	8002a8c <HAL_TIM_PWM_ConfigChannel+0x164>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	223c      	movs	r2, #60	; 0x3c
 8002946:	2101      	movs	r1, #1
 8002948:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	223d      	movs	r2, #61	; 0x3d
 800294e:	2102      	movs	r1, #2
 8002950:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b04      	cmp	r3, #4
 8002956:	d029      	beq.n	80029ac <HAL_TIM_PWM_ConfigChannel+0x84>
 8002958:	d802      	bhi.n	8002960 <HAL_TIM_PWM_ConfigChannel+0x38>
 800295a:	2b00      	cmp	r3, #0
 800295c:	d005      	beq.n	800296a <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 800295e:	e08c      	b.n	8002a7a <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8002960:	2b08      	cmp	r3, #8
 8002962:	d046      	beq.n	80029f2 <HAL_TIM_PWM_ConfigChannel+0xca>
 8002964:	2b0c      	cmp	r3, #12
 8002966:	d065      	beq.n	8002a34 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 8002968:	e087      	b.n	8002a7a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68ba      	ldr	r2, [r7, #8]
 8002970:	0011      	movs	r1, r2
 8002972:	0018      	movs	r0, r3
 8002974:	f000 f906 	bl	8002b84 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	699a      	ldr	r2, [r3, #24]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2108      	movs	r1, #8
 8002984:	430a      	orrs	r2, r1
 8002986:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	699a      	ldr	r2, [r3, #24]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2104      	movs	r1, #4
 8002994:	438a      	bics	r2, r1
 8002996:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6999      	ldr	r1, [r3, #24]
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	691a      	ldr	r2, [r3, #16]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	619a      	str	r2, [r3, #24]
      break;
 80029aa:	e066      	b.n	8002a7a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68ba      	ldr	r2, [r7, #8]
 80029b2:	0011      	movs	r1, r2
 80029b4:	0018      	movs	r0, r3
 80029b6:	f000 f963 	bl	8002c80 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	699a      	ldr	r2, [r3, #24]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2180      	movs	r1, #128	; 0x80
 80029c6:	0109      	lsls	r1, r1, #4
 80029c8:	430a      	orrs	r2, r1
 80029ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	699a      	ldr	r2, [r3, #24]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	492f      	ldr	r1, [pc, #188]	; (8002a94 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 80029d8:	400a      	ands	r2, r1
 80029da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6999      	ldr	r1, [r3, #24]
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	021a      	lsls	r2, r3, #8
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	430a      	orrs	r2, r1
 80029ee:	619a      	str	r2, [r3, #24]
      break;
 80029f0:	e043      	b.n	8002a7a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68ba      	ldr	r2, [r7, #8]
 80029f8:	0011      	movs	r1, r2
 80029fa:	0018      	movs	r0, r3
 80029fc:	f000 f9be 	bl	8002d7c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	69da      	ldr	r2, [r3, #28]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2108      	movs	r1, #8
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	69da      	ldr	r2, [r3, #28]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2104      	movs	r1, #4
 8002a1c:	438a      	bics	r2, r1
 8002a1e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	69d9      	ldr	r1, [r3, #28]
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	691a      	ldr	r2, [r3, #16]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	61da      	str	r2, [r3, #28]
      break;
 8002a32:	e022      	b.n	8002a7a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68ba      	ldr	r2, [r7, #8]
 8002a3a:	0011      	movs	r1, r2
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	f000 fa1d 	bl	8002e7c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	69da      	ldr	r2, [r3, #28]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2180      	movs	r1, #128	; 0x80
 8002a4e:	0109      	lsls	r1, r1, #4
 8002a50:	430a      	orrs	r2, r1
 8002a52:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	69da      	ldr	r2, [r3, #28]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	490d      	ldr	r1, [pc, #52]	; (8002a94 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8002a60:	400a      	ands	r2, r1
 8002a62:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	69d9      	ldr	r1, [r3, #28]
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	021a      	lsls	r2, r3, #8
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	430a      	orrs	r2, r1
 8002a76:	61da      	str	r2, [r3, #28]
      break;
 8002a78:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	223d      	movs	r2, #61	; 0x3d
 8002a7e:	2101      	movs	r1, #1
 8002a80:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	223c      	movs	r2, #60	; 0x3c
 8002a86:	2100      	movs	r1, #0
 8002a88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	b004      	add	sp, #16
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	fffffbff 	.word	0xfffffbff

08002a98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a30      	ldr	r2, [pc, #192]	; (8002b6c <TIM_Base_SetConfig+0xd4>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d008      	beq.n	8002ac2 <TIM_Base_SetConfig+0x2a>
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	2380      	movs	r3, #128	; 0x80
 8002ab4:	05db      	lsls	r3, r3, #23
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d003      	beq.n	8002ac2 <TIM_Base_SetConfig+0x2a>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a2c      	ldr	r2, [pc, #176]	; (8002b70 <TIM_Base_SetConfig+0xd8>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d108      	bne.n	8002ad4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2270      	movs	r2, #112	; 0x70
 8002ac6:	4393      	bics	r3, r2
 8002ac8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a25      	ldr	r2, [pc, #148]	; (8002b6c <TIM_Base_SetConfig+0xd4>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d014      	beq.n	8002b06 <TIM_Base_SetConfig+0x6e>
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	2380      	movs	r3, #128	; 0x80
 8002ae0:	05db      	lsls	r3, r3, #23
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d00f      	beq.n	8002b06 <TIM_Base_SetConfig+0x6e>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a21      	ldr	r2, [pc, #132]	; (8002b70 <TIM_Base_SetConfig+0xd8>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d00b      	beq.n	8002b06 <TIM_Base_SetConfig+0x6e>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a20      	ldr	r2, [pc, #128]	; (8002b74 <TIM_Base_SetConfig+0xdc>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d007      	beq.n	8002b06 <TIM_Base_SetConfig+0x6e>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a1f      	ldr	r2, [pc, #124]	; (8002b78 <TIM_Base_SetConfig+0xe0>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d003      	beq.n	8002b06 <TIM_Base_SetConfig+0x6e>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a1e      	ldr	r2, [pc, #120]	; (8002b7c <TIM_Base_SetConfig+0xe4>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d108      	bne.n	8002b18 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	4a1d      	ldr	r2, [pc, #116]	; (8002b80 <TIM_Base_SetConfig+0xe8>)
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2280      	movs	r2, #128	; 0x80
 8002b1c:	4393      	bics	r3, r2
 8002b1e:	001a      	movs	r2, r3
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	689a      	ldr	r2, [r3, #8]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a0a      	ldr	r2, [pc, #40]	; (8002b6c <TIM_Base_SetConfig+0xd4>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d007      	beq.n	8002b56 <TIM_Base_SetConfig+0xbe>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a0b      	ldr	r2, [pc, #44]	; (8002b78 <TIM_Base_SetConfig+0xe0>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d003      	beq.n	8002b56 <TIM_Base_SetConfig+0xbe>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a0a      	ldr	r2, [pc, #40]	; (8002b7c <TIM_Base_SetConfig+0xe4>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d103      	bne.n	8002b5e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	691a      	ldr	r2, [r3, #16]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2201      	movs	r2, #1
 8002b62:	615a      	str	r2, [r3, #20]
}
 8002b64:	46c0      	nop			; (mov r8, r8)
 8002b66:	46bd      	mov	sp, r7
 8002b68:	b004      	add	sp, #16
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	40012c00 	.word	0x40012c00
 8002b70:	40000400 	.word	0x40000400
 8002b74:	40002000 	.word	0x40002000
 8002b78:	40014400 	.word	0x40014400
 8002b7c:	40014800 	.word	0x40014800
 8002b80:	fffffcff 	.word	0xfffffcff

08002b84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	2201      	movs	r2, #1
 8002b94:	4393      	bics	r3, r2
 8002b96:	001a      	movs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2270      	movs	r2, #112	; 0x70
 8002bb2:	4393      	bics	r3, r2
 8002bb4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2203      	movs	r2, #3
 8002bba:	4393      	bics	r3, r2
 8002bbc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	2202      	movs	r2, #2
 8002bcc:	4393      	bics	r3, r2
 8002bce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	697a      	ldr	r2, [r7, #20]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a23      	ldr	r2, [pc, #140]	; (8002c6c <TIM_OC1_SetConfig+0xe8>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d007      	beq.n	8002bf2 <TIM_OC1_SetConfig+0x6e>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a22      	ldr	r2, [pc, #136]	; (8002c70 <TIM_OC1_SetConfig+0xec>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d003      	beq.n	8002bf2 <TIM_OC1_SetConfig+0x6e>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a21      	ldr	r2, [pc, #132]	; (8002c74 <TIM_OC1_SetConfig+0xf0>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d10c      	bne.n	8002c0c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	2208      	movs	r2, #8
 8002bf6:	4393      	bics	r3, r2
 8002bf8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	2204      	movs	r2, #4
 8002c08:	4393      	bics	r3, r2
 8002c0a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a17      	ldr	r2, [pc, #92]	; (8002c6c <TIM_OC1_SetConfig+0xe8>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d007      	beq.n	8002c24 <TIM_OC1_SetConfig+0xa0>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a16      	ldr	r2, [pc, #88]	; (8002c70 <TIM_OC1_SetConfig+0xec>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d003      	beq.n	8002c24 <TIM_OC1_SetConfig+0xa0>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a15      	ldr	r2, [pc, #84]	; (8002c74 <TIM_OC1_SetConfig+0xf0>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d111      	bne.n	8002c48 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	4a14      	ldr	r2, [pc, #80]	; (8002c78 <TIM_OC1_SetConfig+0xf4>)
 8002c28:	4013      	ands	r3, r2
 8002c2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	4a13      	ldr	r2, [pc, #76]	; (8002c7c <TIM_OC1_SetConfig+0xf8>)
 8002c30:	4013      	ands	r3, r2
 8002c32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	621a      	str	r2, [r3, #32]
}
 8002c62:	46c0      	nop			; (mov r8, r8)
 8002c64:	46bd      	mov	sp, r7
 8002c66:	b006      	add	sp, #24
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	46c0      	nop			; (mov r8, r8)
 8002c6c:	40012c00 	.word	0x40012c00
 8002c70:	40014400 	.word	0x40014400
 8002c74:	40014800 	.word	0x40014800
 8002c78:	fffffeff 	.word	0xfffffeff
 8002c7c:	fffffdff 	.word	0xfffffdff

08002c80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	2210      	movs	r2, #16
 8002c90:	4393      	bics	r3, r2
 8002c92:	001a      	movs	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	4a2c      	ldr	r2, [pc, #176]	; (8002d60 <TIM_OC2_SetConfig+0xe0>)
 8002cae:	4013      	ands	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	4a2b      	ldr	r2, [pc, #172]	; (8002d64 <TIM_OC2_SetConfig+0xe4>)
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	021b      	lsls	r3, r3, #8
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	2220      	movs	r2, #32
 8002cca:	4393      	bics	r3, r2
 8002ccc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	011b      	lsls	r3, r3, #4
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a22      	ldr	r2, [pc, #136]	; (8002d68 <TIM_OC2_SetConfig+0xe8>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d10d      	bne.n	8002cfe <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	2280      	movs	r2, #128	; 0x80
 8002ce6:	4393      	bics	r3, r2
 8002ce8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	011b      	lsls	r3, r3, #4
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	2240      	movs	r2, #64	; 0x40
 8002cfa:	4393      	bics	r3, r2
 8002cfc:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a19      	ldr	r2, [pc, #100]	; (8002d68 <TIM_OC2_SetConfig+0xe8>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d007      	beq.n	8002d16 <TIM_OC2_SetConfig+0x96>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a18      	ldr	r2, [pc, #96]	; (8002d6c <TIM_OC2_SetConfig+0xec>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d003      	beq.n	8002d16 <TIM_OC2_SetConfig+0x96>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a17      	ldr	r2, [pc, #92]	; (8002d70 <TIM_OC2_SetConfig+0xf0>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d113      	bne.n	8002d3e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	4a16      	ldr	r2, [pc, #88]	; (8002d74 <TIM_OC2_SetConfig+0xf4>)
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	4a15      	ldr	r2, [pc, #84]	; (8002d78 <TIM_OC2_SetConfig+0xf8>)
 8002d22:	4013      	ands	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	621a      	str	r2, [r3, #32]
}
 8002d58:	46c0      	nop			; (mov r8, r8)
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	b006      	add	sp, #24
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	ffff8fff 	.word	0xffff8fff
 8002d64:	fffffcff 	.word	0xfffffcff
 8002d68:	40012c00 	.word	0x40012c00
 8002d6c:	40014400 	.word	0x40014400
 8002d70:	40014800 	.word	0x40014800
 8002d74:	fffffbff 	.word	0xfffffbff
 8002d78:	fffff7ff 	.word	0xfffff7ff

08002d7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	4a33      	ldr	r2, [pc, #204]	; (8002e58 <TIM_OC3_SetConfig+0xdc>)
 8002d8c:	401a      	ands	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	69db      	ldr	r3, [r3, #28]
 8002da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2270      	movs	r2, #112	; 0x70
 8002da8:	4393      	bics	r3, r2
 8002daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2203      	movs	r2, #3
 8002db0:	4393      	bics	r3, r2
 8002db2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	4a26      	ldr	r2, [pc, #152]	; (8002e5c <TIM_OC3_SetConfig+0xe0>)
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	021b      	lsls	r3, r3, #8
 8002dcc:	697a      	ldr	r2, [r7, #20]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a22      	ldr	r2, [pc, #136]	; (8002e60 <TIM_OC3_SetConfig+0xe4>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d10d      	bne.n	8002df6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	4a21      	ldr	r2, [pc, #132]	; (8002e64 <TIM_OC3_SetConfig+0xe8>)
 8002dde:	4013      	ands	r3, r2
 8002de0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	021b      	lsls	r3, r3, #8
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	4a1d      	ldr	r2, [pc, #116]	; (8002e68 <TIM_OC3_SetConfig+0xec>)
 8002df2:	4013      	ands	r3, r2
 8002df4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a19      	ldr	r2, [pc, #100]	; (8002e60 <TIM_OC3_SetConfig+0xe4>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d007      	beq.n	8002e0e <TIM_OC3_SetConfig+0x92>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a1a      	ldr	r2, [pc, #104]	; (8002e6c <TIM_OC3_SetConfig+0xf0>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d003      	beq.n	8002e0e <TIM_OC3_SetConfig+0x92>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a19      	ldr	r2, [pc, #100]	; (8002e70 <TIM_OC3_SetConfig+0xf4>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d113      	bne.n	8002e36 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	4a18      	ldr	r2, [pc, #96]	; (8002e74 <TIM_OC3_SetConfig+0xf8>)
 8002e12:	4013      	ands	r3, r2
 8002e14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	4a17      	ldr	r2, [pc, #92]	; (8002e78 <TIM_OC3_SetConfig+0xfc>)
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	011b      	lsls	r3, r3, #4
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	011b      	lsls	r3, r3, #4
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	621a      	str	r2, [r3, #32]
}
 8002e50:	46c0      	nop			; (mov r8, r8)
 8002e52:	46bd      	mov	sp, r7
 8002e54:	b006      	add	sp, #24
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	fffffeff 	.word	0xfffffeff
 8002e5c:	fffffdff 	.word	0xfffffdff
 8002e60:	40012c00 	.word	0x40012c00
 8002e64:	fffff7ff 	.word	0xfffff7ff
 8002e68:	fffffbff 	.word	0xfffffbff
 8002e6c:	40014400 	.word	0x40014400
 8002e70:	40014800 	.word	0x40014800
 8002e74:	ffffefff 	.word	0xffffefff
 8002e78:	ffffdfff 	.word	0xffffdfff

08002e7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	4a26      	ldr	r2, [pc, #152]	; (8002f24 <TIM_OC4_SetConfig+0xa8>)
 8002e8c:	401a      	ands	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	69db      	ldr	r3, [r3, #28]
 8002ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4a20      	ldr	r2, [pc, #128]	; (8002f28 <TIM_OC4_SetConfig+0xac>)
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	4a1f      	ldr	r2, [pc, #124]	; (8002f2c <TIM_OC4_SetConfig+0xb0>)
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	021b      	lsls	r3, r3, #8
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	4a1b      	ldr	r2, [pc, #108]	; (8002f30 <TIM_OC4_SetConfig+0xb4>)
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	031b      	lsls	r3, r3, #12
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a17      	ldr	r2, [pc, #92]	; (8002f34 <TIM_OC4_SetConfig+0xb8>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d007      	beq.n	8002eec <TIM_OC4_SetConfig+0x70>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a16      	ldr	r2, [pc, #88]	; (8002f38 <TIM_OC4_SetConfig+0xbc>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d003      	beq.n	8002eec <TIM_OC4_SetConfig+0x70>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a15      	ldr	r2, [pc, #84]	; (8002f3c <TIM_OC4_SetConfig+0xc0>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d109      	bne.n	8002f00 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	4a14      	ldr	r2, [pc, #80]	; (8002f40 <TIM_OC4_SetConfig+0xc4>)
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	695b      	ldr	r3, [r3, #20]
 8002ef8:	019b      	lsls	r3, r3, #6
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	621a      	str	r2, [r3, #32]
}
 8002f1a:	46c0      	nop			; (mov r8, r8)
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	b006      	add	sp, #24
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	46c0      	nop			; (mov r8, r8)
 8002f24:	ffffefff 	.word	0xffffefff
 8002f28:	ffff8fff 	.word	0xffff8fff
 8002f2c:	fffffcff 	.word	0xfffffcff
 8002f30:	ffffdfff 	.word	0xffffdfff
 8002f34:	40012c00 	.word	0x40012c00
 8002f38:	40014400 	.word	0x40014400
 8002f3c:	40014800 	.word	0x40014800
 8002f40:	ffffbfff 	.word	0xffffbfff

08002f44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	223c      	movs	r2, #60	; 0x3c
 8002f52:	5c9b      	ldrb	r3, [r3, r2]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d101      	bne.n	8002f5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f58:	2302      	movs	r3, #2
 8002f5a:	e042      	b.n	8002fe2 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	223c      	movs	r2, #60	; 0x3c
 8002f60:	2101      	movs	r1, #1
 8002f62:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	223d      	movs	r2, #61	; 0x3d
 8002f68:	2102      	movs	r1, #2
 8002f6a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2270      	movs	r2, #112	; 0x70
 8002f80:	4393      	bics	r3, r2
 8002f82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a14      	ldr	r2, [pc, #80]	; (8002fec <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d00a      	beq.n	8002fb6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	2380      	movs	r3, #128	; 0x80
 8002fa6:	05db      	lsls	r3, r3, #23
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d004      	beq.n	8002fb6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a0f      	ldr	r2, [pc, #60]	; (8002ff0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d10c      	bne.n	8002fd0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	2280      	movs	r2, #128	; 0x80
 8002fba:	4393      	bics	r3, r2
 8002fbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68ba      	ldr	r2, [r7, #8]
 8002fce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	223d      	movs	r2, #61	; 0x3d
 8002fd4:	2101      	movs	r1, #1
 8002fd6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	223c      	movs	r2, #60	; 0x3c
 8002fdc:	2100      	movs	r1, #0
 8002fde:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	b004      	add	sp, #16
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	40012c00 	.word	0x40012c00
 8002ff0:	40000400 	.word	0x40000400

08002ff4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002ffe:	2300      	movs	r3, #0
 8003000:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	223c      	movs	r2, #60	; 0x3c
 8003006:	5c9b      	ldrb	r3, [r3, r2]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d101      	bne.n	8003010 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800300c:	2302      	movs	r3, #2
 800300e:	e03e      	b.n	800308e <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	223c      	movs	r2, #60	; 0x3c
 8003014:	2101      	movs	r1, #1
 8003016:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	22ff      	movs	r2, #255	; 0xff
 800301c:	4393      	bics	r3, r2
 800301e:	001a      	movs	r2, r3
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	4313      	orrs	r3, r2
 8003026:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	4a1b      	ldr	r2, [pc, #108]	; (8003098 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 800302c:	401a      	ands	r2, r3
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	4313      	orrs	r3, r2
 8003034:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	4a18      	ldr	r2, [pc, #96]	; (800309c <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800303a:	401a      	ands	r2, r3
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	4313      	orrs	r3, r2
 8003042:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4a16      	ldr	r2, [pc, #88]	; (80030a0 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8003048:	401a      	ands	r2, r3
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4313      	orrs	r3, r2
 8003050:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	4a13      	ldr	r2, [pc, #76]	; (80030a4 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8003056:	401a      	ands	r2, r3
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	4313      	orrs	r3, r2
 800305e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4a11      	ldr	r2, [pc, #68]	; (80030a8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8003064:	401a      	ands	r2, r3
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	4313      	orrs	r3, r2
 800306c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	4a0e      	ldr	r2, [pc, #56]	; (80030ac <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8003072:	401a      	ands	r2, r3
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	69db      	ldr	r3, [r3, #28]
 8003078:	4313      	orrs	r3, r2
 800307a:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	223c      	movs	r2, #60	; 0x3c
 8003088:	2100      	movs	r1, #0
 800308a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	0018      	movs	r0, r3
 8003090:	46bd      	mov	sp, r7
 8003092:	b004      	add	sp, #16
 8003094:	bd80      	pop	{r7, pc}
 8003096:	46c0      	nop			; (mov r8, r8)
 8003098:	fffffcff 	.word	0xfffffcff
 800309c:	fffffbff 	.word	0xfffffbff
 80030a0:	fffff7ff 	.word	0xfffff7ff
 80030a4:	ffffefff 	.word	0xffffefff
 80030a8:	ffffdfff 	.word	0xffffdfff
 80030ac:	ffffbfff 	.word	0xffffbfff

080030b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e044      	b.n	800314c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d107      	bne.n	80030da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2270      	movs	r2, #112	; 0x70
 80030ce:	2100      	movs	r1, #0
 80030d0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	0018      	movs	r0, r3
 80030d6:	f7fd feaf 	bl	8000e38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2224      	movs	r2, #36	; 0x24
 80030de:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2101      	movs	r1, #1
 80030ec:	438a      	bics	r2, r1
 80030ee:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	0018      	movs	r0, r3
 80030f4:	f000 f830 	bl	8003158 <UART_SetConfig>
 80030f8:	0003      	movs	r3, r0
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d101      	bne.n	8003102 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e024      	b.n	800314c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	0018      	movs	r0, r3
 800310e:	f000 f9a9 	bl	8003464 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	490d      	ldr	r1, [pc, #52]	; (8003154 <HAL_UART_Init+0xa4>)
 800311e:	400a      	ands	r2, r1
 8003120:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	212a      	movs	r1, #42	; 0x2a
 800312e:	438a      	bics	r2, r1
 8003130:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2101      	movs	r1, #1
 800313e:	430a      	orrs	r2, r1
 8003140:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	0018      	movs	r0, r3
 8003146:	f000 fa41 	bl	80035cc <UART_CheckIdleState>
 800314a:	0003      	movs	r3, r0
}
 800314c:	0018      	movs	r0, r3
 800314e:	46bd      	mov	sp, r7
 8003150:	b002      	add	sp, #8
 8003152:	bd80      	pop	{r7, pc}
 8003154:	ffffb7ff 	.word	0xffffb7ff

08003158 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b088      	sub	sp, #32
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003160:	2300      	movs	r3, #0
 8003162:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003164:	2317      	movs	r3, #23
 8003166:	18fb      	adds	r3, r7, r3
 8003168:	2200      	movs	r2, #0
 800316a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	431a      	orrs	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	69db      	ldr	r3, [r3, #28]
 8003180:	4313      	orrs	r3, r2
 8003182:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4aad      	ldr	r2, [pc, #692]	; (8003440 <UART_SetConfig+0x2e8>)
 800318c:	4013      	ands	r3, r2
 800318e:	0019      	movs	r1, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	430a      	orrs	r2, r1
 8003198:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	4aa8      	ldr	r2, [pc, #672]	; (8003444 <UART_SetConfig+0x2ec>)
 80031a2:	4013      	ands	r3, r2
 80031a4:	0019      	movs	r1, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68da      	ldr	r2, [r3, #12]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	4313      	orrs	r3, r2
 80031c0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	4a9f      	ldr	r2, [pc, #636]	; (8003448 <UART_SetConfig+0x2f0>)
 80031ca:	4013      	ands	r3, r2
 80031cc:	0019      	movs	r1, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	430a      	orrs	r2, r1
 80031d6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a9b      	ldr	r2, [pc, #620]	; (800344c <UART_SetConfig+0x2f4>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d125      	bne.n	800322e <UART_SetConfig+0xd6>
 80031e2:	4b9b      	ldr	r3, [pc, #620]	; (8003450 <UART_SetConfig+0x2f8>)
 80031e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e6:	2203      	movs	r2, #3
 80031e8:	4013      	ands	r3, r2
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d00f      	beq.n	800320e <UART_SetConfig+0xb6>
 80031ee:	d304      	bcc.n	80031fa <UART_SetConfig+0xa2>
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d011      	beq.n	8003218 <UART_SetConfig+0xc0>
 80031f4:	2b03      	cmp	r3, #3
 80031f6:	d005      	beq.n	8003204 <UART_SetConfig+0xac>
 80031f8:	e013      	b.n	8003222 <UART_SetConfig+0xca>
 80031fa:	231f      	movs	r3, #31
 80031fc:	18fb      	adds	r3, r7, r3
 80031fe:	2200      	movs	r2, #0
 8003200:	701a      	strb	r2, [r3, #0]
 8003202:	e022      	b.n	800324a <UART_SetConfig+0xf2>
 8003204:	231f      	movs	r3, #31
 8003206:	18fb      	adds	r3, r7, r3
 8003208:	2202      	movs	r2, #2
 800320a:	701a      	strb	r2, [r3, #0]
 800320c:	e01d      	b.n	800324a <UART_SetConfig+0xf2>
 800320e:	231f      	movs	r3, #31
 8003210:	18fb      	adds	r3, r7, r3
 8003212:	2204      	movs	r2, #4
 8003214:	701a      	strb	r2, [r3, #0]
 8003216:	e018      	b.n	800324a <UART_SetConfig+0xf2>
 8003218:	231f      	movs	r3, #31
 800321a:	18fb      	adds	r3, r7, r3
 800321c:	2208      	movs	r2, #8
 800321e:	701a      	strb	r2, [r3, #0]
 8003220:	e013      	b.n	800324a <UART_SetConfig+0xf2>
 8003222:	231f      	movs	r3, #31
 8003224:	18fb      	adds	r3, r7, r3
 8003226:	2210      	movs	r2, #16
 8003228:	701a      	strb	r2, [r3, #0]
 800322a:	46c0      	nop			; (mov r8, r8)
 800322c:	e00d      	b.n	800324a <UART_SetConfig+0xf2>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a88      	ldr	r2, [pc, #544]	; (8003454 <UART_SetConfig+0x2fc>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d104      	bne.n	8003242 <UART_SetConfig+0xea>
 8003238:	231f      	movs	r3, #31
 800323a:	18fb      	adds	r3, r7, r3
 800323c:	2200      	movs	r2, #0
 800323e:	701a      	strb	r2, [r3, #0]
 8003240:	e003      	b.n	800324a <UART_SetConfig+0xf2>
 8003242:	231f      	movs	r3, #31
 8003244:	18fb      	adds	r3, r7, r3
 8003246:	2210      	movs	r2, #16
 8003248:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69da      	ldr	r2, [r3, #28]
 800324e:	2380      	movs	r3, #128	; 0x80
 8003250:	021b      	lsls	r3, r3, #8
 8003252:	429a      	cmp	r2, r3
 8003254:	d000      	beq.n	8003258 <UART_SetConfig+0x100>
 8003256:	e07d      	b.n	8003354 <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 8003258:	231f      	movs	r3, #31
 800325a:	18fb      	adds	r3, r7, r3
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	2b02      	cmp	r3, #2
 8003260:	d01c      	beq.n	800329c <UART_SetConfig+0x144>
 8003262:	dc02      	bgt.n	800326a <UART_SetConfig+0x112>
 8003264:	2b00      	cmp	r3, #0
 8003266:	d005      	beq.n	8003274 <UART_SetConfig+0x11c>
 8003268:	e04b      	b.n	8003302 <UART_SetConfig+0x1aa>
 800326a:	2b04      	cmp	r3, #4
 800326c:	d025      	beq.n	80032ba <UART_SetConfig+0x162>
 800326e:	2b08      	cmp	r3, #8
 8003270:	d037      	beq.n	80032e2 <UART_SetConfig+0x18a>
 8003272:	e046      	b.n	8003302 <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003274:	f7ff faea 	bl	800284c <HAL_RCC_GetPCLK1Freq>
 8003278:	0003      	movs	r3, r0
 800327a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	005a      	lsls	r2, r3, #1
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	085b      	lsrs	r3, r3, #1
 8003286:	18d2      	adds	r2, r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	0019      	movs	r1, r3
 800328e:	0010      	movs	r0, r2
 8003290:	f7fc ff3a 	bl	8000108 <__udivsi3>
 8003294:	0003      	movs	r3, r0
 8003296:	b29b      	uxth	r3, r3
 8003298:	61bb      	str	r3, [r7, #24]
        break;
 800329a:	e037      	b.n	800330c <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	085b      	lsrs	r3, r3, #1
 80032a2:	4a6d      	ldr	r2, [pc, #436]	; (8003458 <UART_SetConfig+0x300>)
 80032a4:	189a      	adds	r2, r3, r2
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	0019      	movs	r1, r3
 80032ac:	0010      	movs	r0, r2
 80032ae:	f7fc ff2b 	bl	8000108 <__udivsi3>
 80032b2:	0003      	movs	r3, r0
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	61bb      	str	r3, [r7, #24]
        break;
 80032b8:	e028      	b.n	800330c <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032ba:	f7ff fa3f 	bl	800273c <HAL_RCC_GetSysClockFreq>
 80032be:	0003      	movs	r3, r0
 80032c0:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	005a      	lsls	r2, r3, #1
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	085b      	lsrs	r3, r3, #1
 80032cc:	18d2      	adds	r2, r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	0019      	movs	r1, r3
 80032d4:	0010      	movs	r0, r2
 80032d6:	f7fc ff17 	bl	8000108 <__udivsi3>
 80032da:	0003      	movs	r3, r0
 80032dc:	b29b      	uxth	r3, r3
 80032de:	61bb      	str	r3, [r7, #24]
        break;
 80032e0:	e014      	b.n	800330c <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	085b      	lsrs	r3, r3, #1
 80032e8:	2280      	movs	r2, #128	; 0x80
 80032ea:	0252      	lsls	r2, r2, #9
 80032ec:	189a      	adds	r2, r3, r2
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	0019      	movs	r1, r3
 80032f4:	0010      	movs	r0, r2
 80032f6:	f7fc ff07 	bl	8000108 <__udivsi3>
 80032fa:	0003      	movs	r3, r0
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	61bb      	str	r3, [r7, #24]
        break;
 8003300:	e004      	b.n	800330c <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 8003302:	2317      	movs	r3, #23
 8003304:	18fb      	adds	r3, r7, r3
 8003306:	2201      	movs	r2, #1
 8003308:	701a      	strb	r2, [r3, #0]
        break;
 800330a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	2b0f      	cmp	r3, #15
 8003310:	d91b      	bls.n	800334a <UART_SetConfig+0x1f2>
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	4a51      	ldr	r2, [pc, #324]	; (800345c <UART_SetConfig+0x304>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d817      	bhi.n	800334a <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	b29a      	uxth	r2, r3
 800331e:	200a      	movs	r0, #10
 8003320:	183b      	adds	r3, r7, r0
 8003322:	210f      	movs	r1, #15
 8003324:	438a      	bics	r2, r1
 8003326:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	085b      	lsrs	r3, r3, #1
 800332c:	b29b      	uxth	r3, r3
 800332e:	2207      	movs	r2, #7
 8003330:	4013      	ands	r3, r2
 8003332:	b299      	uxth	r1, r3
 8003334:	183b      	adds	r3, r7, r0
 8003336:	183a      	adds	r2, r7, r0
 8003338:	8812      	ldrh	r2, [r2, #0]
 800333a:	430a      	orrs	r2, r1
 800333c:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	183a      	adds	r2, r7, r0
 8003344:	8812      	ldrh	r2, [r2, #0]
 8003346:	60da      	str	r2, [r3, #12]
 8003348:	e06c      	b.n	8003424 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 800334a:	2317      	movs	r3, #23
 800334c:	18fb      	adds	r3, r7, r3
 800334e:	2201      	movs	r2, #1
 8003350:	701a      	strb	r2, [r3, #0]
 8003352:	e067      	b.n	8003424 <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 8003354:	231f      	movs	r3, #31
 8003356:	18fb      	adds	r3, r7, r3
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	2b02      	cmp	r3, #2
 800335c:	d01b      	beq.n	8003396 <UART_SetConfig+0x23e>
 800335e:	dc02      	bgt.n	8003366 <UART_SetConfig+0x20e>
 8003360:	2b00      	cmp	r3, #0
 8003362:	d005      	beq.n	8003370 <UART_SetConfig+0x218>
 8003364:	e049      	b.n	80033fa <UART_SetConfig+0x2a2>
 8003366:	2b04      	cmp	r3, #4
 8003368:	d024      	beq.n	80033b4 <UART_SetConfig+0x25c>
 800336a:	2b08      	cmp	r3, #8
 800336c:	d035      	beq.n	80033da <UART_SetConfig+0x282>
 800336e:	e044      	b.n	80033fa <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003370:	f7ff fa6c 	bl	800284c <HAL_RCC_GetPCLK1Freq>
 8003374:	0003      	movs	r3, r0
 8003376:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	085a      	lsrs	r2, r3, #1
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	18d2      	adds	r2, r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	0019      	movs	r1, r3
 8003388:	0010      	movs	r0, r2
 800338a:	f7fc febd 	bl	8000108 <__udivsi3>
 800338e:	0003      	movs	r3, r0
 8003390:	b29b      	uxth	r3, r3
 8003392:	61bb      	str	r3, [r7, #24]
        break;
 8003394:	e036      	b.n	8003404 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	085b      	lsrs	r3, r3, #1
 800339c:	4a30      	ldr	r2, [pc, #192]	; (8003460 <UART_SetConfig+0x308>)
 800339e:	189a      	adds	r2, r3, r2
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	0019      	movs	r1, r3
 80033a6:	0010      	movs	r0, r2
 80033a8:	f7fc feae 	bl	8000108 <__udivsi3>
 80033ac:	0003      	movs	r3, r0
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	61bb      	str	r3, [r7, #24]
        break;
 80033b2:	e027      	b.n	8003404 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033b4:	f7ff f9c2 	bl	800273c <HAL_RCC_GetSysClockFreq>
 80033b8:	0003      	movs	r3, r0
 80033ba:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	085a      	lsrs	r2, r3, #1
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	18d2      	adds	r2, r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	0019      	movs	r1, r3
 80033cc:	0010      	movs	r0, r2
 80033ce:	f7fc fe9b 	bl	8000108 <__udivsi3>
 80033d2:	0003      	movs	r3, r0
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	61bb      	str	r3, [r7, #24]
        break;
 80033d8:	e014      	b.n	8003404 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	085b      	lsrs	r3, r3, #1
 80033e0:	2280      	movs	r2, #128	; 0x80
 80033e2:	0212      	lsls	r2, r2, #8
 80033e4:	189a      	adds	r2, r3, r2
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	0019      	movs	r1, r3
 80033ec:	0010      	movs	r0, r2
 80033ee:	f7fc fe8b 	bl	8000108 <__udivsi3>
 80033f2:	0003      	movs	r3, r0
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	61bb      	str	r3, [r7, #24]
        break;
 80033f8:	e004      	b.n	8003404 <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 80033fa:	2317      	movs	r3, #23
 80033fc:	18fb      	adds	r3, r7, r3
 80033fe:	2201      	movs	r2, #1
 8003400:	701a      	strb	r2, [r3, #0]
        break;
 8003402:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	2b0f      	cmp	r3, #15
 8003408:	d908      	bls.n	800341c <UART_SetConfig+0x2c4>
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	4a13      	ldr	r2, [pc, #76]	; (800345c <UART_SetConfig+0x304>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d804      	bhi.n	800341c <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	60da      	str	r2, [r3, #12]
 800341a:	e003      	b.n	8003424 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 800341c:	2317      	movs	r3, #23
 800341e:	18fb      	adds	r3, r7, r3
 8003420:	2201      	movs	r2, #1
 8003422:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003430:	2317      	movs	r3, #23
 8003432:	18fb      	adds	r3, r7, r3
 8003434:	781b      	ldrb	r3, [r3, #0]
}
 8003436:	0018      	movs	r0, r3
 8003438:	46bd      	mov	sp, r7
 800343a:	b008      	add	sp, #32
 800343c:	bd80      	pop	{r7, pc}
 800343e:	46c0      	nop			; (mov r8, r8)
 8003440:	efff69f3 	.word	0xefff69f3
 8003444:	ffffcfff 	.word	0xffffcfff
 8003448:	fffff4ff 	.word	0xfffff4ff
 800344c:	40013800 	.word	0x40013800
 8003450:	40021000 	.word	0x40021000
 8003454:	40004400 	.word	0x40004400
 8003458:	00f42400 	.word	0x00f42400
 800345c:	0000ffff 	.word	0x0000ffff
 8003460:	007a1200 	.word	0x007a1200

08003464 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	2201      	movs	r2, #1
 8003472:	4013      	ands	r3, r2
 8003474:	d00b      	beq.n	800348e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	4a4a      	ldr	r2, [pc, #296]	; (80035a8 <UART_AdvFeatureConfig+0x144>)
 800347e:	4013      	ands	r3, r2
 8003480:	0019      	movs	r1, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	430a      	orrs	r2, r1
 800348c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003492:	2202      	movs	r2, #2
 8003494:	4013      	ands	r3, r2
 8003496:	d00b      	beq.n	80034b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	4a43      	ldr	r2, [pc, #268]	; (80035ac <UART_AdvFeatureConfig+0x148>)
 80034a0:	4013      	ands	r3, r2
 80034a2:	0019      	movs	r1, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	430a      	orrs	r2, r1
 80034ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b4:	2204      	movs	r2, #4
 80034b6:	4013      	ands	r3, r2
 80034b8:	d00b      	beq.n	80034d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	4a3b      	ldr	r2, [pc, #236]	; (80035b0 <UART_AdvFeatureConfig+0x14c>)
 80034c2:	4013      	ands	r3, r2
 80034c4:	0019      	movs	r1, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d6:	2208      	movs	r2, #8
 80034d8:	4013      	ands	r3, r2
 80034da:	d00b      	beq.n	80034f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	4a34      	ldr	r2, [pc, #208]	; (80035b4 <UART_AdvFeatureConfig+0x150>)
 80034e4:	4013      	ands	r3, r2
 80034e6:	0019      	movs	r1, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	430a      	orrs	r2, r1
 80034f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f8:	2210      	movs	r2, #16
 80034fa:	4013      	ands	r3, r2
 80034fc:	d00b      	beq.n	8003516 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	4a2c      	ldr	r2, [pc, #176]	; (80035b8 <UART_AdvFeatureConfig+0x154>)
 8003506:	4013      	ands	r3, r2
 8003508:	0019      	movs	r1, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	430a      	orrs	r2, r1
 8003514:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	2220      	movs	r2, #32
 800351c:	4013      	ands	r3, r2
 800351e:	d00b      	beq.n	8003538 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	4a25      	ldr	r2, [pc, #148]	; (80035bc <UART_AdvFeatureConfig+0x158>)
 8003528:	4013      	ands	r3, r2
 800352a:	0019      	movs	r1, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	430a      	orrs	r2, r1
 8003536:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	2240      	movs	r2, #64	; 0x40
 800353e:	4013      	ands	r3, r2
 8003540:	d01d      	beq.n	800357e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	4a1d      	ldr	r2, [pc, #116]	; (80035c0 <UART_AdvFeatureConfig+0x15c>)
 800354a:	4013      	ands	r3, r2
 800354c:	0019      	movs	r1, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800355e:	2380      	movs	r3, #128	; 0x80
 8003560:	035b      	lsls	r3, r3, #13
 8003562:	429a      	cmp	r2, r3
 8003564:	d10b      	bne.n	800357e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	4a15      	ldr	r2, [pc, #84]	; (80035c4 <UART_AdvFeatureConfig+0x160>)
 800356e:	4013      	ands	r3, r2
 8003570:	0019      	movs	r1, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	430a      	orrs	r2, r1
 800357c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003582:	2280      	movs	r2, #128	; 0x80
 8003584:	4013      	ands	r3, r2
 8003586:	d00b      	beq.n	80035a0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	4a0e      	ldr	r2, [pc, #56]	; (80035c8 <UART_AdvFeatureConfig+0x164>)
 8003590:	4013      	ands	r3, r2
 8003592:	0019      	movs	r1, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	430a      	orrs	r2, r1
 800359e:	605a      	str	r2, [r3, #4]
  }
}
 80035a0:	46c0      	nop			; (mov r8, r8)
 80035a2:	46bd      	mov	sp, r7
 80035a4:	b002      	add	sp, #8
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	fffdffff 	.word	0xfffdffff
 80035ac:	fffeffff 	.word	0xfffeffff
 80035b0:	fffbffff 	.word	0xfffbffff
 80035b4:	ffff7fff 	.word	0xffff7fff
 80035b8:	ffffefff 	.word	0xffffefff
 80035bc:	ffffdfff 	.word	0xffffdfff
 80035c0:	ffefffff 	.word	0xffefffff
 80035c4:	ff9fffff 	.word	0xff9fffff
 80035c8:	fff7ffff 	.word	0xfff7ffff

080035cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af02      	add	r7, sp, #8
 80035d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80035da:	f7fd fd35 	bl	8001048 <HAL_GetTick>
 80035de:	0003      	movs	r3, r0
 80035e0:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2208      	movs	r2, #8
 80035ea:	4013      	ands	r3, r2
 80035ec:	2b08      	cmp	r3, #8
 80035ee:	d10d      	bne.n	800360c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	2380      	movs	r3, #128	; 0x80
 80035f4:	0399      	lsls	r1, r3, #14
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	4b16      	ldr	r3, [pc, #88]	; (8003654 <UART_CheckIdleState+0x88>)
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	0013      	movs	r3, r2
 80035fe:	2200      	movs	r2, #0
 8003600:	f000 f82a 	bl	8003658 <UART_WaitOnFlagUntilTimeout>
 8003604:	1e03      	subs	r3, r0, #0
 8003606:	d001      	beq.n	800360c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e01f      	b.n	800364c <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2204      	movs	r2, #4
 8003614:	4013      	ands	r3, r2
 8003616:	2b04      	cmp	r3, #4
 8003618:	d10d      	bne.n	8003636 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	2380      	movs	r3, #128	; 0x80
 800361e:	03d9      	lsls	r1, r3, #15
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	4b0c      	ldr	r3, [pc, #48]	; (8003654 <UART_CheckIdleState+0x88>)
 8003624:	9300      	str	r3, [sp, #0]
 8003626:	0013      	movs	r3, r2
 8003628:	2200      	movs	r2, #0
 800362a:	f000 f815 	bl	8003658 <UART_WaitOnFlagUntilTimeout>
 800362e:	1e03      	subs	r3, r0, #0
 8003630:	d001      	beq.n	8003636 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e00a      	b.n	800364c <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2220      	movs	r2, #32
 800363a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2220      	movs	r2, #32
 8003640:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2270      	movs	r2, #112	; 0x70
 8003646:	2100      	movs	r1, #0
 8003648:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	0018      	movs	r0, r3
 800364e:	46bd      	mov	sp, r7
 8003650:	b004      	add	sp, #16
 8003652:	bd80      	pop	{r7, pc}
 8003654:	01ffffff 	.word	0x01ffffff

08003658 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	603b      	str	r3, [r7, #0]
 8003664:	1dfb      	adds	r3, r7, #7
 8003666:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003668:	e05d      	b.n	8003726 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	3301      	adds	r3, #1
 800366e:	d05a      	beq.n	8003726 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003670:	f7fd fcea 	bl	8001048 <HAL_GetTick>
 8003674:	0002      	movs	r2, r0
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	429a      	cmp	r2, r3
 800367e:	d302      	bcc.n	8003686 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d11b      	bne.n	80036be <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	492f      	ldr	r1, [pc, #188]	; (8003750 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003692:	400a      	ands	r2, r1
 8003694:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	689a      	ldr	r2, [r3, #8]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2101      	movs	r1, #1
 80036a2:	438a      	bics	r2, r1
 80036a4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2220      	movs	r2, #32
 80036aa:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2220      	movs	r2, #32
 80036b0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2270      	movs	r2, #112	; 0x70
 80036b6:	2100      	movs	r1, #0
 80036b8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e043      	b.n	8003746 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2204      	movs	r2, #4
 80036c6:	4013      	ands	r3, r2
 80036c8:	d02d      	beq.n	8003726 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	69da      	ldr	r2, [r3, #28]
 80036d0:	2380      	movs	r3, #128	; 0x80
 80036d2:	011b      	lsls	r3, r3, #4
 80036d4:	401a      	ands	r2, r3
 80036d6:	2380      	movs	r3, #128	; 0x80
 80036d8:	011b      	lsls	r3, r3, #4
 80036da:	429a      	cmp	r2, r3
 80036dc:	d123      	bne.n	8003726 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2280      	movs	r2, #128	; 0x80
 80036e4:	0112      	lsls	r2, r2, #4
 80036e6:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4917      	ldr	r1, [pc, #92]	; (8003750 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80036f4:	400a      	ands	r2, r1
 80036f6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689a      	ldr	r2, [r3, #8]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2101      	movs	r1, #1
 8003704:	438a      	bics	r2, r1
 8003706:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2220      	movs	r2, #32
 800370c:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2220      	movs	r2, #32
 8003712:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2220      	movs	r2, #32
 8003718:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2270      	movs	r2, #112	; 0x70
 800371e:	2100      	movs	r1, #0
 8003720:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e00f      	b.n	8003746 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	68ba      	ldr	r2, [r7, #8]
 800372e:	4013      	ands	r3, r2
 8003730:	68ba      	ldr	r2, [r7, #8]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	425a      	negs	r2, r3
 8003736:	4153      	adcs	r3, r2
 8003738:	b2db      	uxtb	r3, r3
 800373a:	001a      	movs	r2, r3
 800373c:	1dfb      	adds	r3, r7, #7
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	429a      	cmp	r2, r3
 8003742:	d092      	beq.n	800366a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	0018      	movs	r0, r3
 8003748:	46bd      	mov	sp, r7
 800374a:	b004      	add	sp, #16
 800374c:	bd80      	pop	{r7, pc}
 800374e:	46c0      	nop			; (mov r8, r8)
 8003750:	fffffe5f 	.word	0xfffffe5f

08003754 <__libc_init_array>:
 8003754:	b570      	push	{r4, r5, r6, lr}
 8003756:	2600      	movs	r6, #0
 8003758:	4d0c      	ldr	r5, [pc, #48]	; (800378c <__libc_init_array+0x38>)
 800375a:	4c0d      	ldr	r4, [pc, #52]	; (8003790 <__libc_init_array+0x3c>)
 800375c:	1b64      	subs	r4, r4, r5
 800375e:	10a4      	asrs	r4, r4, #2
 8003760:	42a6      	cmp	r6, r4
 8003762:	d109      	bne.n	8003778 <__libc_init_array+0x24>
 8003764:	2600      	movs	r6, #0
 8003766:	f000 f821 	bl	80037ac <_init>
 800376a:	4d0a      	ldr	r5, [pc, #40]	; (8003794 <__libc_init_array+0x40>)
 800376c:	4c0a      	ldr	r4, [pc, #40]	; (8003798 <__libc_init_array+0x44>)
 800376e:	1b64      	subs	r4, r4, r5
 8003770:	10a4      	asrs	r4, r4, #2
 8003772:	42a6      	cmp	r6, r4
 8003774:	d105      	bne.n	8003782 <__libc_init_array+0x2e>
 8003776:	bd70      	pop	{r4, r5, r6, pc}
 8003778:	00b3      	lsls	r3, r6, #2
 800377a:	58eb      	ldr	r3, [r5, r3]
 800377c:	4798      	blx	r3
 800377e:	3601      	adds	r6, #1
 8003780:	e7ee      	b.n	8003760 <__libc_init_array+0xc>
 8003782:	00b3      	lsls	r3, r6, #2
 8003784:	58eb      	ldr	r3, [r5, r3]
 8003786:	4798      	blx	r3
 8003788:	3601      	adds	r6, #1
 800378a:	e7f2      	b.n	8003772 <__libc_init_array+0x1e>
 800378c:	080037fc 	.word	0x080037fc
 8003790:	080037fc 	.word	0x080037fc
 8003794:	080037fc 	.word	0x080037fc
 8003798:	08003800 	.word	0x08003800

0800379c <memset>:
 800379c:	0003      	movs	r3, r0
 800379e:	1812      	adds	r2, r2, r0
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d100      	bne.n	80037a6 <memset+0xa>
 80037a4:	4770      	bx	lr
 80037a6:	7019      	strb	r1, [r3, #0]
 80037a8:	3301      	adds	r3, #1
 80037aa:	e7f9      	b.n	80037a0 <memset+0x4>

080037ac <_init>:
 80037ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ae:	46c0      	nop			; (mov r8, r8)
 80037b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037b2:	bc08      	pop	{r3}
 80037b4:	469e      	mov	lr, r3
 80037b6:	4770      	bx	lr

080037b8 <_fini>:
 80037b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ba:	46c0      	nop			; (mov r8, r8)
 80037bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037be:	bc08      	pop	{r3}
 80037c0:	469e      	mov	lr, r3
 80037c2:	4770      	bx	lr
